{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMedication = exports.default = exports.MedicationProvider = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _storage = require(\"../utils/storage\");\nvar _validation = require(\"../utils/validation\");\nvar _helpers = require(\"../utils/helpers\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"/Users/vaishnavkrishnan/Documents/projects/pd_app/src/context/MedicationContext.tsx\";\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar initialState = {\n  medications: [],\n  loading: false,\n  error: null,\n  missedMedications: []\n};\nvar medicationReducer = function medicationReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return Object.assign({}, state, {\n        loading: action.payload\n      });\n    case 'SET_ERROR':\n      return Object.assign({}, state, {\n        error: action.payload,\n        loading: false\n      });\n    case 'SET_MEDICATIONS':\n      return Object.assign({}, state, {\n        medications: action.payload,\n        loading: false,\n        error: null\n      });\n    case 'ADD_MEDICATION':\n      return Object.assign({}, state, {\n        medications: [].concat((0, _toConsumableArray2.default)(state.medications), [action.payload]),\n        error: null\n      });\n    case 'UPDATE_MEDICATION':\n      return Object.assign({}, state, {\n        medications: state.medications.map(function (med) {\n          return med.id === action.payload.id ? action.payload : med;\n        }),\n        error: null\n      });\n    case 'DELETE_MEDICATION':\n      return Object.assign({}, state, {\n        medications: state.medications.filter(function (med) {\n          return med.id !== action.payload;\n        }),\n        error: null\n      });\n    case 'SET_MISSED_MEDICATIONS':\n      return Object.assign({}, state, {\n        missedMedications: action.payload\n      });\n    case 'REMOVE_MISSED_MEDICATION':\n      return Object.assign({}, state, {\n        missedMedications: state.missedMedications.filter(function (item) {\n          return !(item.medication.id === action.payload.medicationId && item.time === action.payload.time);\n        })\n      });\n    default:\n      return state;\n  }\n};\nvar MedicationContext = (0, _react.createContext)(undefined);\nvar MedicationProvider = exports.MedicationProvider = function MedicationProvider(_ref) {\n  var children = _ref.children;\n  var _useReducer = (0, _react.useReducer)(medicationReducer, initialState),\n    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  (0, _react.useEffect)(function () {\n    loadMedicationsData();\n  }, []);\n  (0, _react.useEffect)(function () {\n    var interval = setInterval(function () {\n      checkMissedMedications();\n    }, 60000);\n    checkMissedMedications();\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [state.medications]);\n  var loadMedicationsData = function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        });\n        var medications = yield (0, _storage.loadMedicines)();\n        dispatch({\n          type: 'SET_MEDICATIONS',\n          payload: medications\n        });\n      } catch (error) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to load medications'\n        });\n        console.error('Error loading medications:', error);\n      }\n    });\n    return function loadMedicationsData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var addMedication = function () {\n    var _ref3 = (0, _asyncToGenerator2.default)(function* (medicationData) {\n      try {\n        var validation = (0, _validation.validateMedication)(medicationData);\n        if (!validation.isValid) {\n          return validation;\n        }\n        var newMedication = Object.assign({}, medicationData, {\n          id: (0, _helpers.generateId)()\n        });\n        yield (0, _storage.addMedication)(newMedication);\n        dispatch({\n          type: 'ADD_MEDICATION',\n          payload: newMedication\n        });\n        return {\n          isValid: true,\n          errors: []\n        };\n      } catch (error) {\n        var errorMessage = 'Failed to add medication';\n        dispatch({\n          type: 'SET_ERROR',\n          payload: errorMessage\n        });\n        console.error('Error adding medication:', error);\n        return {\n          isValid: false,\n          errors: [errorMessage]\n        };\n      }\n    });\n    return function addMedication(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var updateMedication = function () {\n    var _ref4 = (0, _asyncToGenerator2.default)(function* (updatedMedication) {\n      try {\n        var validation = (0, _validation.validateMedication)(updatedMedication);\n        if (!validation.isValid) {\n          return validation;\n        }\n        yield (0, _storage.updateMedication)(updatedMedication);\n        dispatch({\n          type: 'UPDATE_MEDICATION',\n          payload: updatedMedication\n        });\n        return {\n          isValid: true,\n          errors: []\n        };\n      } catch (error) {\n        var errorMessage = 'Failed to update medication';\n        dispatch({\n          type: 'SET_ERROR',\n          payload: errorMessage\n        });\n        console.error('Error updating medication:', error);\n        return {\n          isValid: false,\n          errors: [errorMessage]\n        };\n      }\n    });\n    return function updateMedication(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var deleteMedication = function () {\n    var _ref5 = (0, _asyncToGenerator2.default)(function* (medicationId) {\n      try {\n        yield (0, _storage.deleteMedication)(medicationId);\n        dispatch({\n          type: 'DELETE_MEDICATION',\n          payload: medicationId\n        });\n        dispatch({\n          type: 'SET_MISSED_MEDICATIONS',\n          payload: state.missedMedications.filter(function (item) {\n            return item.medication.id !== medicationId;\n          })\n        });\n      } catch (error) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to delete medication'\n        });\n        console.error('Error deleting medication:', error);\n      }\n    });\n    return function deleteMedication(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var markMedicationTaken = function () {\n    var _ref6 = (0, _asyncToGenerator2.default)(function* (medicationId, time, taken) {\n      try {\n        var dateKey = (0, _helpers.formatDateString)(new Date());\n        var updatedMedications = state.medications.map(function (med) {\n          if (med.id === medicationId) {\n            var existingLogIndex = med.adherenceLog.findIndex(function (log) {\n              return log.date === dateKey && log.time === time;\n            });\n            var updatedLog = (0, _toConsumableArray2.default)(med.adherenceLog);\n            if (existingLogIndex >= 0) {\n              updatedLog[existingLogIndex] = Object.assign({}, updatedLog[existingLogIndex], {\n                taken: taken,\n                takenAt: taken ? new Date() : undefined\n              });\n            } else {\n              var newLogEntry = {\n                date: dateKey,\n                time: time,\n                taken: taken,\n                takenAt: taken ? new Date() : undefined\n              };\n              updatedLog.push(newLogEntry);\n            }\n            return Object.assign({}, med, {\n              adherenceLog: updatedLog\n            });\n          }\n          return med;\n        });\n        yield (0, _storage.saveMedicines)(updatedMedications);\n        dispatch({\n          type: 'SET_MEDICATIONS',\n          payload: updatedMedications\n        });\n        if (taken) {\n          dispatch({\n            type: 'REMOVE_MISSED_MEDICATION',\n            payload: {\n              medicationId: medicationId,\n              time: time\n            }\n          });\n        }\n      } catch (error) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to update medication status'\n        });\n        console.error('Error marking medication taken:', error);\n      }\n    });\n    return function markMedicationTaken(_x4, _x5, _x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var getMedicationStatus = function getMedicationStatus(medication) {\n    var today = (0, _helpers.formatDateString)(new Date());\n    var todayLogs = medication.adherenceLog.filter(function (log) {\n      return log.date === today;\n    });\n    var totalReminders = medication.reminderTimes.length;\n    var takenCount = todayLogs.filter(function (log) {\n      return log.taken;\n    }).length;\n    return {\n      takenCount: takenCount,\n      totalReminders: totalReminders,\n      percentage: totalReminders > 0 ? Math.round(takenCount / totalReminders * 100) : 0\n    };\n  };\n  var getAdherenceStats = function getAdherenceStats(medication) {\n    var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;\n    var endDate = new Date();\n    var startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    var totalExpected = 0;\n    var totalTaken = 0;\n    var _loop = function _loop() {\n      var dateKey = (0, _helpers.formatDateString)(d);\n      var dayLogs = medication.adherenceLog.filter(function (log) {\n        return log.date === dateKey;\n      });\n      totalExpected += medication.reminderTimes.length;\n      totalTaken += dayLogs.filter(function (log) {\n        return log.taken;\n      }).length;\n    };\n    for (var d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n      _loop();\n    }\n    return {\n      totalExpected: totalExpected,\n      totalTaken: totalTaken,\n      percentage: totalExpected > 0 ? Math.round(totalTaken / totalExpected * 100) : 0\n    };\n  };\n  var checkMissedMedications = function checkMissedMedications() {\n    var now = new Date();\n    var currentDate = (0, _helpers.formatDateString)(now);\n    var missed = [];\n    state.medications.forEach(function (medication) {\n      if (!medication.isActive) return;\n      medication.reminderTimes.forEach(function (reminderTime) {\n        var _reminderTime$split$m = reminderTime.split(':').map(Number),\n          _reminderTime$split$m2 = (0, _slicedToArray2.default)(_reminderTime$split$m, 2),\n          reminderHour = _reminderTime$split$m2[0],\n          reminderMinute = _reminderTime$split$m2[1];\n        var reminderDate = new Date();\n        reminderDate.setHours(reminderHour, reminderMinute, 0, 0);\n        var thirtyMinutesLater = new Date(reminderDate.getTime() + 30 * 60 * 1000);\n        if (now > thirtyMinutesLater) {\n          var logEntry = medication.adherenceLog.find(function (log) {\n            return log.date === currentDate && log.time === reminderTime;\n          });\n          if (!logEntry || !logEntry.taken) {\n            missed.push({\n              medication: medication,\n              time: reminderTime\n            });\n          }\n        }\n      });\n    });\n    if (missed.length !== state.missedMedications.length || !missed.every(function (item) {\n      return state.missedMedications.some(function (existing) {\n        return existing.medication.id === item.medication.id && existing.time === item.time;\n      });\n    })) {\n      dispatch({\n        type: 'SET_MISSED_MEDICATIONS',\n        payload: missed\n      });\n    }\n  };\n  var handleMissedMedication = function () {\n    var _ref7 = (0, _asyncToGenerator2.default)(function* (medicationId, time, action) {\n      try {\n        yield markMedicationTaken(medicationId, time, action === 'taken');\n        dispatch({\n          type: 'REMOVE_MISSED_MEDICATION',\n          payload: {\n            medicationId: medicationId,\n            time: time\n          }\n        });\n      } catch (error) {\n        console.error('Error handling missed medication:', error);\n      }\n    });\n    return function handleMissedMedication(_x7, _x8, _x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var toggleMedicationActive = function () {\n    var _ref8 = (0, _asyncToGenerator2.default)(function* (medicationId) {\n      try {\n        var medication = state.medications.find(function (med) {\n          return med.id === medicationId;\n        });\n        if (!medication) return;\n        var updatedMedication = Object.assign({}, medication, {\n          isActive: !medication.isActive\n        });\n        yield updateMedication(updatedMedication);\n      } catch (error) {\n        console.error('Error toggling medication active status:', error);\n      }\n    });\n    return function toggleMedicationActive(_x0) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var getActiveMedications = function getActiveMedications() {\n    return state.medications.filter(function (med) {\n      return med.isActive;\n    });\n  };\n  var getMedicationById = function getMedicationById(medicationId) {\n    return state.medications.find(function (med) {\n      return med.id === medicationId;\n    });\n  };\n  var contextValue = {\n    state: state,\n    loadMedications: loadMedicationsData,\n    addMedication: addMedication,\n    updateMedication: updateMedication,\n    deleteMedication: deleteMedication,\n    markMedicationTaken: markMedicationTaken,\n    getMedicationStatus: getMedicationStatus,\n    getAdherenceStats: getAdherenceStats,\n    checkMissedMedications: checkMissedMedications,\n    handleMissedMedication: handleMissedMedication,\n    toggleMedicationActive: toggleMedicationActive,\n    getActiveMedications: getActiveMedications,\n    getMedicationById: getMedicationById\n  };\n  return (0, _jsxRuntime.jsx)(MedicationContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nvar useMedication = exports.useMedication = function useMedication() {\n  var context = (0, _react.useContext)(MedicationContext);\n  if (context === undefined) {\n    throw new Error('useMedication must be used within a MedicationProvider');\n  }\n  return context;\n};\nvar _default = exports.default = MedicationContext;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_storage","_validation","_helpers","_jsxRuntime","_this","_jsxFileName","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","initialState","medications","loading","error","missedMedications","medicationReducer","state","action","type","assign","payload","concat","_toConsumableArray2","map","med","id","filter","item","medication","medicationId","time","MedicationContext","createContext","undefined","MedicationProvider","exports","_ref","children","_useReducer","useReducer","_useReducer2","_slicedToArray2","dispatch","useEffect","loadMedicationsData","interval","setInterval","checkMissedMedications","clearInterval","_ref2","_asyncToGenerator2","loadMedicines","console","apply","arguments","addMedication","_ref3","medicationData","validation","validateMedication","isValid","newMedication","generateId","addMedicationToStorage","errors","errorMessage","_x","updateMedication","_ref4","updatedMedication","updateMedicationInStorage","_x2","deleteMedication","_ref5","deleteMedicationFromStorage","_x3","markMedicationTaken","_ref6","taken","dateKey","formatDateString","Date","updatedMedications","existingLogIndex","adherenceLog","findIndex","log","date","updatedLog","takenAt","newLogEntry","push","saveMedicines","_x4","_x5","_x6","getMedicationStatus","today","todayLogs","totalReminders","reminderTimes","length","takenCount","percentage","Math","round","getAdherenceStats","days","endDate","startDate","setDate","getDate","totalExpected","totalTaken","_loop","d","dayLogs","now","currentDate","missed","forEach","isActive","reminderTime","_reminderTime$split$m","split","Number","_reminderTime$split$m2","reminderHour","reminderMinute","reminderDate","setHours","thirtyMinutesLater","getTime","logEntry","find","every","some","existing","handleMissedMedication","_ref7","_x7","_x8","_x9","toggleMedicationActive","_ref8","_x0","getActiveMedications","getMedicationById","contextValue","loadMedications","jsx","Provider","value","useMedication","context","useContext","Error","_default"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/context/MedicationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { Medication, MedicationLog, ValidationResult } from '../types';\nimport {\n  loadMedicines,\n  saveMedicines,\n  addMedication as addMedicationToStorage,\n  updateMedication as updateMedicationInStorage,\n  deleteMedication as deleteMedicationFromStorage,\n} from '../utils/storage';\nimport { validateMedication } from '../utils/validation';\nimport { generateId, formatDateString, formatTimeString } from '../utils/helpers';\n\n// State interface\ninterface MedicationState {\n  medications: Medication[];\n  loading: boolean;\n  error: string | null;\n  missedMedications: { medication: Medication; time: string }[];\n}\n\n// Action types\ntype MedicationAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_MEDICATIONS'; payload: Medication[] }\n  | { type: 'ADD_MEDICATION'; payload: Medication }\n  | { type: 'UPDATE_MEDICATION'; payload: Medication }\n  | { type: 'DELETE_MEDICATION'; payload: string }\n  | { type: 'SET_MISSED_MEDICATIONS'; payload: { medication: Medication; time: string }[] }\n  | { type: 'REMOVE_MISSED_MEDICATION'; payload: { medicationId: string; time: string } };\n\n// Initial state\nconst initialState: MedicationState = {\n  medications: [],\n  loading: false,\n  error: null,\n  missedMedications: [],\n};\n\n// Reducer function\nconst medicationReducer = (state: MedicationState, action: MedicationAction): MedicationState => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n    \n    case 'SET_MEDICATIONS':\n      return { ...state, medications: action.payload, loading: false, error: null };\n    \n    case 'ADD_MEDICATION':\n      return {\n        ...state,\n        medications: [...state.medications, action.payload],\n        error: null,\n      };\n    \n    case 'UPDATE_MEDICATION':\n      return {\n        ...state,\n        medications: state.medications.map(med =>\n          med.id === action.payload.id ? action.payload : med\n        ),\n        error: null,\n      };\n    \n    case 'DELETE_MEDICATION':\n      return {\n        ...state,\n        medications: state.medications.filter(med => med.id !== action.payload),\n        error: null,\n      };\n    \n    case 'SET_MISSED_MEDICATIONS':\n      return { ...state, missedMedications: action.payload };\n    \n    case 'REMOVE_MISSED_MEDICATION':\n      return {\n        ...state,\n        missedMedications: state.missedMedications.filter(\n          item => !(item.medication.id === action.payload.medicationId && item.time === action.payload.time)\n        ),\n      };\n    \n    default:\n      return state;\n  }\n};\n\n// Context interface\ninterface MedicationContextType {\n  state: MedicationState;\n  // Medication management\n  loadMedications: () => Promise<void>;\n  addMedication: (medication: Omit<Medication, 'id'>) => Promise<ValidationResult>;\n  updateMedication: (medication: Medication) => Promise<ValidationResult>;\n  deleteMedication: (medicationId: string) => Promise<void>;\n  // Adherence tracking\n  markMedicationTaken: (medicationId: string, time: string, taken: boolean) => Promise<void>;\n  getMedicationStatus: (medication: Medication) => {\n    takenCount: number;\n    totalReminders: number;\n    percentage: number;\n  };\n  getAdherenceStats: (medication: Medication, days?: number) => {\n    totalExpected: number;\n    totalTaken: number;\n    percentage: number;\n  };\n  // Missed medications\n  checkMissedMedications: () => void;\n  handleMissedMedication: (medicationId: string, time: string, action: 'taken' | 'skip') => Promise<void>;\n  // Utility functions\n  toggleMedicationActive: (medicationId: string) => Promise<void>;\n  getActiveMedications: () => Medication[];\n  getMedicationById: (medicationId: string) => Medication | undefined;\n}\n\n// Create context\nconst MedicationContext = createContext<MedicationContextType | undefined>(undefined);\n\n// Provider component\ninterface MedicationProviderProps {\n  children: ReactNode;\n}\n\nexport const MedicationProvider: React.FC<MedicationProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(medicationReducer, initialState);\n\n  // Load medications on mount\n  useEffect(() => {\n    loadMedicationsData();\n  }, []);\n\n  // Check for missed medications periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      checkMissedMedications();\n    }, 60000); // Check every minute\n\n    // Check immediately\n    checkMissedMedications();\n\n    return () => clearInterval(interval);\n  }, [state.medications]);\n\n  // Medication management functions\n  const loadMedicationsData = async (): Promise<void> => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      const medications = await loadMedicines();\n      dispatch({ type: 'SET_MEDICATIONS', payload: medications });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to load medications' });\n      console.error('Error loading medications:', error);\n    }\n  };\n\n  const addMedication = async (medicationData: Omit<Medication, 'id'>): Promise<ValidationResult> => {\n    try {\n      // Validate medication data\n      const validation = validateMedication(medicationData);\n      if (!validation.isValid) {\n        return validation;\n      }\n\n      // Create medication with ID\n      const newMedication: Medication = {\n        ...medicationData,\n        id: generateId(),\n      };\n\n      // Save to storage\n      await addMedicationToStorage(newMedication);\n      \n      // Update state\n      dispatch({ type: 'ADD_MEDICATION', payload: newMedication });\n\n      return { isValid: true, errors: [] };\n    } catch (error) {\n      const errorMessage = 'Failed to add medication';\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      console.error('Error adding medication:', error);\n      return { isValid: false, errors: [errorMessage] };\n    }\n  };\n\n  const updateMedication = async (updatedMedication: Medication): Promise<ValidationResult> => {\n    try {\n      // Validate medication data\n      const validation = validateMedication(updatedMedication);\n      if (!validation.isValid) {\n        return validation;\n      }\n\n      // Save to storage\n      await updateMedicationInStorage(updatedMedication);\n      \n      // Update state\n      dispatch({ type: 'UPDATE_MEDICATION', payload: updatedMedication });\n\n      return { isValid: true, errors: [] };\n    } catch (error) {\n      const errorMessage = 'Failed to update medication';\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      console.error('Error updating medication:', error);\n      return { isValid: false, errors: [errorMessage] };\n    }\n  };\n\n  const deleteMedication = async (medicationId: string): Promise<void> => {\n    try {\n      await deleteMedicationFromStorage(medicationId);\n      dispatch({ type: 'DELETE_MEDICATION', payload: medicationId });\n      \n      // Remove from missed medications if present\n      dispatch({\n        type: 'SET_MISSED_MEDICATIONS',\n        payload: state.missedMedications.filter(item => item.medication.id !== medicationId),\n      });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to delete medication' });\n      console.error('Error deleting medication:', error);\n    }\n  };\n\n  // Adherence tracking functions\n  const markMedicationTaken = async (medicationId: string, time: string, taken: boolean): Promise<void> => {\n    try {\n      const dateKey = formatDateString(new Date());\n      \n      const updatedMedications = state.medications.map(med => {\n        if (med.id === medicationId) {\n          // Find existing log entry for this date and time\n          const existingLogIndex = med.adherenceLog.findIndex(\n            log => log.date === dateKey && log.time === time\n          );\n\n          let updatedLog = [...med.adherenceLog];\n          \n          if (existingLogIndex >= 0) {\n            // Update existing entry\n            updatedLog[existingLogIndex] = {\n              ...updatedLog[existingLogIndex],\n              taken,\n              takenAt: taken ? new Date() : undefined,\n            };\n          } else {\n            // Add new entry\n            const newLogEntry: MedicationLog = {\n              date: dateKey,\n              time,\n              taken,\n              takenAt: taken ? new Date() : undefined,\n            };\n            updatedLog.push(newLogEntry);\n          }\n\n          return {\n            ...med,\n            adherenceLog: updatedLog,\n          };\n        }\n        return med;\n      });\n\n      // Save to storage\n      await saveMedicines(updatedMedications);\n      \n      // Update state\n      dispatch({ type: 'SET_MEDICATIONS', payload: updatedMedications });\n\n      // Remove from missed medications if taken\n      if (taken) {\n        dispatch({\n          type: 'REMOVE_MISSED_MEDICATION',\n          payload: { medicationId, time },\n        });\n      }\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to update medication status' });\n      console.error('Error marking medication taken:', error);\n    }\n  };\n\n  const getMedicationStatus = (medication: Medication) => {\n    const today = formatDateString(new Date());\n    const todayLogs = medication.adherenceLog.filter(log => log.date === today);\n    const totalReminders = medication.reminderTimes.length;\n    const takenCount = todayLogs.filter(log => log.taken).length;\n    \n    return {\n      takenCount,\n      totalReminders,\n      percentage: totalReminders > 0 ? Math.round((takenCount / totalReminders) * 100) : 0,\n    };\n  };\n\n  const getAdherenceStats = (medication: Medication, days: number = 7) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    let totalExpected = 0;\n    let totalTaken = 0;\n    \n    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n      const dateKey = formatDateString(d);\n      const dayLogs = medication.adherenceLog.filter(log => log.date === dateKey);\n      \n      totalExpected += medication.reminderTimes.length;\n      totalTaken += dayLogs.filter(log => log.taken).length;\n    }\n    \n    return {\n      totalExpected,\n      totalTaken,\n      percentage: totalExpected > 0 ? Math.round((totalTaken / totalExpected) * 100) : 0,\n    };\n  };\n\n  // Missed medications functions\n  const checkMissedMedications = (): void => {\n    const now = new Date();\n    const currentDate = formatDateString(now);\n    \n    const missed: { medication: Medication; time: string }[] = [];\n    \n    state.medications.forEach(medication => {\n      if (!medication.isActive) return;\n      \n      medication.reminderTimes.forEach(reminderTime => {\n        // Check if this time has passed by more than 30 minutes\n        const [reminderHour, reminderMinute] = reminderTime.split(':').map(Number);\n        const reminderDate = new Date();\n        reminderDate.setHours(reminderHour, reminderMinute, 0, 0);\n        \n        const thirtyMinutesLater = new Date(reminderDate.getTime() + 30 * 60 * 1000);\n        \n        if (now > thirtyMinutesLater) {\n          // Check if medication was taken\n          const logEntry = medication.adherenceLog.find(\n            log => log.date === currentDate && log.time === reminderTime\n          );\n          \n          if (!logEntry || !logEntry.taken) {\n            missed.push({ medication, time: reminderTime });\n          }\n        }\n      });\n    });\n    \n    // Only update if the missed medications have changed\n    if (missed.length !== state.missedMedications.length ||\n        !missed.every(item => \n          state.missedMedications.some(existing => \n            existing.medication.id === item.medication.id && existing.time === item.time\n          )\n        )) {\n      dispatch({ type: 'SET_MISSED_MEDICATIONS', payload: missed });\n    }\n  };\n\n  const handleMissedMedication = async (medicationId: string, time: string, action: 'taken' | 'skip'): Promise<void> => {\n    try {\n      await markMedicationTaken(medicationId, time, action === 'taken');\n      \n      // Remove from missed medications\n      dispatch({\n        type: 'REMOVE_MISSED_MEDICATION',\n        payload: { medicationId, time },\n      });\n    } catch (error) {\n      console.error('Error handling missed medication:', error);\n    }\n  };\n\n  // Utility functions\n  const toggleMedicationActive = async (medicationId: string): Promise<void> => {\n    try {\n      const medication = state.medications.find(med => med.id === medicationId);\n      if (!medication) return;\n\n      const updatedMedication = {\n        ...medication,\n        isActive: !medication.isActive,\n      };\n\n      await updateMedication(updatedMedication);\n    } catch (error) {\n      console.error('Error toggling medication active status:', error);\n    }\n  };\n\n  const getActiveMedications = (): Medication[] => {\n    return state.medications.filter(med => med.isActive);\n  };\n\n  const getMedicationById = (medicationId: string): Medication | undefined => {\n    return state.medications.find(med => med.id === medicationId);\n  };\n\n  // Context value\n  const contextValue: MedicationContextType = {\n    state,\n    loadMedications: loadMedicationsData,\n    addMedication,\n    updateMedication,\n    deleteMedication,\n    markMedicationTaken,\n    getMedicationStatus,\n    getAdherenceStats,\n    checkMissedMedications,\n    handleMissedMedication,\n    toggleMedicationActive,\n    getActiveMedications,\n    getMedicationById,\n  };\n\n  return (\n    <MedicationContext.Provider value={contextValue}>\n      {children}\n    </MedicationContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useMedication = (): MedicationContextType => {\n  const context = useContext(MedicationContext);\n  if (context === undefined) {\n    throw new Error('useMedication must be used within a MedicationProvider');\n  }\n  return context;\n};\n\nexport default MedicationContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}