{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTimeToMinutes = exports.minutesToTimeString = exports.isToday = exports.isPastDate = exports.getDayBounds = exports.generateId = exports.formatTimeString = exports.formatDateString = exports.createDefaultTimetableEvent = exports.createDefaultTask = exports.createDefaultMedication = exports.calculateProductivityScore = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar generateId = exports.generateId = function generateId() {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\nvar createDefaultTimetableEvent = exports.createDefaultTimetableEvent = function createDefaultTimetableEvent() {\n  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign({\n    title: '',\n    description: '',\n    startTime: new Date(),\n    duration: 60,\n    category: 'personal',\n    isRecurring: false,\n    notificationEnabled: true\n  }, overrides);\n};\nvar createDefaultTask = exports.createDefaultTask = function createDefaultTask() {\n  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign({\n    title: '',\n    description: '',\n    priority: 'medium',\n    dueDate: new Date(),\n    isCompleted: false,\n    category: 'general'\n  }, overrides);\n};\nvar createDefaultMedication = exports.createDefaultMedication = function createDefaultMedication() {\n  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign({\n    name: '',\n    dosage: '',\n    reminderTimes: [],\n    isActive: true,\n    adherenceLog: []\n  }, overrides);\n};\nvar formatDateString = exports.formatDateString = function formatDateString(date) {\n  return date.toISOString().split('T')[0];\n};\nvar formatTimeString = exports.formatTimeString = function formatTimeString(date) {\n  return date.toTimeString().slice(0, 5);\n};\nvar parseTimeToMinutes = exports.parseTimeToMinutes = function parseTimeToMinutes(timeString) {\n  var _timeString$split$map = timeString.split(':').map(Number),\n    _timeString$split$map2 = (0, _slicedToArray2.default)(_timeString$split$map, 2),\n    hours = _timeString$split$map2[0],\n    minutes = _timeString$split$map2[1];\n  return hours * 60 + minutes;\n};\nvar minutesToTimeString = exports.minutesToTimeString = function minutesToTimeString(minutes) {\n  var hours = Math.floor(minutes / 60);\n  var mins = minutes % 60;\n  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n};\nvar isToday = exports.isToday = function isToday(date) {\n  var today = new Date();\n  return formatDateString(date) === formatDateString(today);\n};\nvar isPastDate = exports.isPastDate = function isPastDate(date) {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  var compareDate = new Date(date);\n  compareDate.setHours(0, 0, 0, 0);\n  return compareDate < today;\n};\nvar getDayBounds = exports.getDayBounds = function getDayBounds(date) {\n  var start = new Date(date);\n  start.setHours(0, 0, 0, 0);\n  var end = new Date(date);\n  end.setHours(23, 59, 59, 999);\n  return {\n    start: start,\n    end: end\n  };\n};\nvar calculateProductivityScore = exports.calculateProductivityScore = function calculateProductivityScore(completedTasks, totalTasks, completedEvents, totalEvents, medicationAdherence) {\n  var taskScore = totalTasks > 0 ? completedTasks / totalTasks * 40 : 0;\n  var eventScore = totalEvents > 0 ? completedEvents / totalEvents * 40 : 0;\n  var medicationScore = medicationAdherence * 20;\n  return Math.round(taskScore + eventScore + medicationScore);\n};","map":{"version":3,"names":["generateId","exports","Date","now","toString","Math","random","substr","createDefaultTimetableEvent","overrides","arguments","length","undefined","Object","assign","title","description","startTime","duration","category","isRecurring","notificationEnabled","createDefaultTask","priority","dueDate","isCompleted","createDefaultMedication","name","dosage","reminderTimes","isActive","adherenceLog","formatDateString","date","toISOString","split","formatTimeString","toTimeString","slice","parseTimeToMinutes","timeString","_timeString$split$map","map","Number","_timeString$split$map2","_slicedToArray2","default","hours","minutes","minutesToTimeString","floor","mins","padStart","isToday","today","isPastDate","setHours","compareDate","getDayBounds","start","end","calculateProductivityScore","completedTasks","totalTasks","completedEvents","totalEvents","medicationAdherence","taskScore","eventScore","medicationScore","round"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/src/utils/helpers.ts"],"sourcesContent":["/**\n * Generates a unique ID for data models\n */\nexport const generateId = (): string => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\n/**\n * Creates a new TimetableEvent with default values\n */\nexport const createDefaultTimetableEvent = (overrides: Partial<import('../types').TimetableEvent> = {}): Omit<import('../types').TimetableEvent, 'id'> => {\n  return {\n    title: '',\n    description: '',\n    startTime: new Date(),\n    duration: 60,\n    category: 'personal',\n    isRecurring: false,\n    notificationEnabled: true,\n    ...overrides,\n  };\n};\n\n/**\n * Creates a new Task with default values\n */\nexport const createDefaultTask = (overrides: Partial<import('../types').Task> = {}): Omit<import('../types').Task, 'id'> => {\n  return {\n    title: '',\n    description: '',\n    priority: 'medium',\n    dueDate: new Date(),\n    isCompleted: false,\n    category: 'general',\n    ...overrides,\n  };\n};\n\n/**\n * Creates a new Medication with default values\n */\nexport const createDefaultMedication = (overrides: Partial<import('../types').Medication> = {}): Omit<import('../types').Medication, 'id'> => {\n  return {\n    name: '',\n    dosage: '',\n    reminderTimes: [],\n    isActive: true,\n    adherenceLog: [],\n    ...overrides,\n  };\n};\n\n/**\n * Formats a date to YYYY-MM-DD string\n */\nexport const formatDateString = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n/**\n * Formats a date to HH:MM string\n */\nexport const formatTimeString = (date: Date): string => {\n  return date.toTimeString().slice(0, 5);\n};\n\n/**\n * Parses a time string (HH:MM) and returns minutes since midnight\n */\nexport const parseTimeToMinutes = (timeString: string): number => {\n  const [hours, minutes] = timeString.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\n/**\n * Converts minutes since midnight to HH:MM format\n */\nexport const minutesToTimeString = (minutes: number): string => {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n};\n\n/**\n * Checks if a date is today\n */\nexport const isToday = (date: Date): boolean => {\n  const today = new Date();\n  return formatDateString(date) === formatDateString(today);\n};\n\n/**\n * Checks if a date is in the past\n */\nexport const isPastDate = (date: Date): boolean => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const compareDate = new Date(date);\n  compareDate.setHours(0, 0, 0, 0);\n  return compareDate < today;\n};\n\n/**\n * Gets the start and end of a day\n */\nexport const getDayBounds = (date: Date): { start: Date; end: Date } => {\n  const start = new Date(date);\n  start.setHours(0, 0, 0, 0);\n  \n  const end = new Date(date);\n  end.setHours(23, 59, 59, 999);\n  \n  return { start, end };\n};\n\n/**\n * Calculates productivity score based on completed tasks and events\n */\nexport const calculateProductivityScore = (\n  completedTasks: number,\n  totalTasks: number,\n  completedEvents: number,\n  totalEvents: number,\n  medicationAdherence: number\n): number => {\n  const taskScore = totalTasks > 0 ? (completedTasks / totalTasks) * 40 : 0;\n  const eventScore = totalEvents > 0 ? (completedEvents / totalEvents) * 40 : 0;\n  const medicationScore = medicationAdherence * 20;\n  \n  return Math.round(taskScore + eventScore + medicationScore);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}