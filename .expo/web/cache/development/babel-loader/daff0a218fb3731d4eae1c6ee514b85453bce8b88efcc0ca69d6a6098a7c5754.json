{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodedError = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar CodedError = exports.CodedError = function (_Error) {\n  function CodedError(code, message) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CodedError);\n    _this = _callSuper(this, CodedError, [message]);\n    _this.code = code;\n    return _this;\n  }\n  (0, _inherits2.default)(CodedError, _Error);\n  return (0, _createClass2.default)(CodedError);\n}((0, _wrapNativeSuper2.default)(Error));","map":{"version":3,"names":["CodedError","exports","_Error","code","message","_this","_classCallCheck2","default","_callSuper","_inherits2","_createClass2","_wrapNativeSuper2","Error"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/node_modules/expo-modules-core/src/errors/CodedError.ts"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;IAKaA,UAAW,GAAAC,OAAA,CAAAD,UAAA,aAAAE,MAAA;EAItB,SAAAF,WAAYG,IAAY,EAAEC,OAAe;IAAA,IAAAC,KAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAP,UAAA;IACvCK,KAAA,GAAAG,UAAA,OAAAR,UAAA,GAAMI,OAAO;IACbC,KAAA,CAAKF,IAAI,GAAGA,IAAI;IAAC,OAAAE,KAAA;EACnB;EAAC,IAAAI,UAAA,CAAAF,OAAA,EAAAP,UAAA,EAAAE,MAAA;EAAA,WAAAQ,aAAA,CAAAH,OAAA,EAAAP,UAAA;AAAA,MAAAW,iBAAA,CAAAJ,OAAA,EAP6BK,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}