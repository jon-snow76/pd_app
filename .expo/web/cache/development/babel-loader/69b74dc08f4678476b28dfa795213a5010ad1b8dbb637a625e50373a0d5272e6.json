{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNotificationNavigation = exports.validateDeepLink = exports.navigateWithGuard = exports.navigateFromNotificationWithGuard = exports.navigateDeepLinkWithGuard = exports.canNavigateToScreen = void 0;\nvar _NavigationService = require(\"../services/NavigationService\");\nvar canNavigateToScreen = exports.canNavigateToScreen = function canNavigateToScreen(screenName, context) {\n  switch (screenName) {\n    case 'Timetable':\n      return {\n        canNavigate: true\n      };\n    case 'Tasks':\n      return {\n        canNavigate: true\n      };\n    case 'Medications':\n      return {\n        canNavigate: true\n      };\n    case 'Progress':\n      return {\n        canNavigate: true\n      };\n    default:\n      return {\n        canNavigate: false,\n        message: 'Unknown screen'\n      };\n  }\n};\nvar validateDeepLink = exports.validateDeepLink = function validateDeepLink(url) {\n  try {\n    var urlObj = new URL(url);\n    var path = urlObj.pathname;\n    if (!url.startsWith('productivityapp://')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid app scheme'\n      };\n    }\n    var validPaths = ['/timetable', '/tasks', '/medications', '/progress'];\n    if (!validPaths.includes(path)) {\n      return {\n        canNavigate: false,\n        message: 'Invalid navigation path'\n      };\n    }\n    var eventId = urlObj.searchParams.get('eventId');\n    var taskId = urlObj.searchParams.get('taskId');\n    var medicationId = urlObj.searchParams.get('medicationId');\n    if (eventId && (!eventId || eventId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid event ID'\n      };\n    }\n    if (taskId && (!taskId || taskId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid task ID'\n      };\n    }\n    if (medicationId && (!medicationId || medicationId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid medication ID'\n      };\n    }\n    return {\n      canNavigate: true\n    };\n  } catch (error) {\n    return {\n      canNavigate: false,\n      message: 'Malformed URL'\n    };\n  }\n};\nvar validateNotificationNavigation = exports.validateNotificationNavigation = function validateNotificationNavigation(notificationData) {\n  if (!notificationData) {\n    return {\n      canNavigate: false,\n      message: 'No notification data provided'\n    };\n  }\n  var type = notificationData.type,\n    id = notificationData.id,\n    screen = notificationData.screen;\n  var validTypes = ['event', 'task', 'medication'];\n  if (!validTypes.includes(type)) {\n    return {\n      canNavigate: false,\n      message: 'Invalid notification type'\n    };\n  }\n  if (!id || id.trim() === '') {\n    return {\n      canNavigate: false,\n      message: 'Invalid notification ID'\n    };\n  }\n  var validScreens = ['Timetable', 'Tasks', 'Medications', 'Progress'];\n  if (screen && !validScreens.includes(screen)) {\n    return {\n      canNavigate: false,\n      message: 'Invalid target screen'\n    };\n  }\n  return {\n    canNavigate: true\n  };\n};\nvar navigateWithGuard = exports.navigateWithGuard = function navigateWithGuard(screenName, params, context) {\n  var guardResult = canNavigateToScreen(screenName, context);\n  if (!guardResult.canNavigate) {\n    console.warn('Navigation blocked:', guardResult.message);\n    if (guardResult.redirectTo) {\n      _NavigationService.navigationService.navigate(guardResult.redirectTo);\n    }\n    return false;\n  }\n  _NavigationService.navigationService.navigate(screenName, params);\n  return true;\n};\nvar navigateDeepLinkWithGuard = exports.navigateDeepLinkWithGuard = function navigateDeepLinkWithGuard(url) {\n  var guardResult = validateDeepLink(url);\n  if (!guardResult.canNavigate) {\n    console.warn('Deep link navigation blocked:', guardResult.message);\n    return false;\n  }\n  _NavigationService.navigationService.handleDeepLink(url);\n  return true;\n};\nvar navigateFromNotificationWithGuard = exports.navigateFromNotificationWithGuard = function navigateFromNotificationWithGuard(notificationData) {\n  var guardResult = validateNotificationNavigation(notificationData);\n  if (!guardResult.canNavigate) {\n    console.warn('Notification navigation blocked:', guardResult.message);\n    return false;\n  }\n  var type = notificationData.type,\n    id = notificationData.id,\n    screen = notificationData.screen;\n  switch (type) {\n    case 'event':\n      _NavigationService.navigationService.navigateToEvent(id);\n      break;\n    case 'task':\n      _NavigationService.navigationService.navigateToTask(id);\n      break;\n    case 'medication':\n      _NavigationService.navigationService.navigateToMedication(id);\n      break;\n    default:\n      if (screen) {\n        _NavigationService.navigationService.navigate(screen);\n      }\n  }\n  return true;\n};","map":{"version":3,"names":["_NavigationService","require","canNavigateToScreen","exports","screenName","context","canNavigate","message","validateDeepLink","url","urlObj","URL","path","pathname","startsWith","validPaths","includes","eventId","searchParams","get","taskId","medicationId","trim","error","validateNotificationNavigation","notificationData","type","id","screen","validTypes","validScreens","navigateWithGuard","params","guardResult","console","warn","redirectTo","navigationService","navigate","navigateDeepLinkWithGuard","handleDeepLink","navigateFromNotificationWithGuard","navigateToEvent","navigateToTask","navigateToMedication"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/utils/navigationGuards.ts"],"sourcesContent":["import { navigationService } from '../services/NavigationService';\n\n/**\n * Navigation guards for handling navigation restrictions and validations\n */\n\nexport interface NavigationGuardResult {\n  canNavigate: boolean;\n  redirectTo?: keyof import('../../App').RootTabParamList;\n  message?: string;\n}\n\n/**\n * Check if user can navigate to a specific screen\n */\nexport const canNavigateToScreen = (\n  screenName: keyof import('../../App').RootTabParamList,\n  context?: any\n): NavigationGuardResult => {\n  // Basic navigation guard - can be extended with more complex logic\n  switch (screenName) {\n    case 'Timetable':\n      return { canNavigate: true };\n    \n    case 'Tasks':\n      return { canNavigate: true };\n    \n    case 'Medications':\n      return { canNavigate: true };\n    \n    case 'Progress':\n      return { canNavigate: true };\n    \n    default:\n      return {\n        canNavigate: false,\n        message: 'Unknown screen',\n      };\n  }\n};\n\n/**\n * Navigation guard for deep links\n */\nexport const validateDeepLink = (url: string): NavigationGuardResult => {\n  try {\n    const urlObj = new URL(url);\n    const path = urlObj.pathname;\n    \n    // Validate URL format\n    if (!url.startsWith('productivityapp://')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid app scheme',\n      };\n    }\n    \n    // Validate path\n    const validPaths = ['/timetable', '/tasks', '/medications', '/progress'];\n    if (!validPaths.includes(path)) {\n      return {\n        canNavigate: false,\n        message: 'Invalid navigation path',\n      };\n    }\n    \n    // Validate query parameters\n    const eventId = urlObj.searchParams.get('eventId');\n    const taskId = urlObj.searchParams.get('taskId');\n    const medicationId = urlObj.searchParams.get('medicationId');\n    \n    // Basic validation for IDs (should be non-empty strings)\n    if (eventId && (!eventId || eventId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid event ID',\n      };\n    }\n    \n    if (taskId && (!taskId || taskId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid task ID',\n      };\n    }\n    \n    if (medicationId && (!medicationId || medicationId.trim() === '')) {\n      return {\n        canNavigate: false,\n        message: 'Invalid medication ID',\n      };\n    }\n    \n    return { canNavigate: true };\n  } catch (error) {\n    return {\n      canNavigate: false,\n      message: 'Malformed URL',\n    };\n  }\n};\n\n/**\n * Navigation guard for notification-triggered navigation\n */\nexport const validateNotificationNavigation = (\n  notificationData: any\n): NavigationGuardResult => {\n  if (!notificationData) {\n    return {\n      canNavigate: false,\n      message: 'No notification data provided',\n    };\n  }\n  \n  const { type, id, screen } = notificationData;\n  \n  // Validate notification type\n  const validTypes = ['event', 'task', 'medication'];\n  if (!validTypes.includes(type)) {\n    return {\n      canNavigate: false,\n      message: 'Invalid notification type',\n    };\n  }\n  \n  // Validate ID\n  if (!id || id.trim() === '') {\n    return {\n      canNavigate: false,\n      message: 'Invalid notification ID',\n    };\n  }\n  \n  // Validate target screen\n  const validScreens = ['Timetable', 'Tasks', 'Medications', 'Progress'];\n  if (screen && !validScreens.includes(screen)) {\n    return {\n      canNavigate: false,\n      message: 'Invalid target screen',\n    };\n  }\n  \n  return { canNavigate: true };\n};\n\n/**\n * Execute navigation with guard validation\n */\nexport const navigateWithGuard = (\n  screenName: keyof import('../../App').RootTabParamList,\n  params?: any,\n  context?: any\n): boolean => {\n  const guardResult = canNavigateToScreen(screenName, context);\n  \n  if (!guardResult.canNavigate) {\n    console.warn('Navigation blocked:', guardResult.message);\n    \n    // If there's a redirect, navigate there instead\n    if (guardResult.redirectTo) {\n      navigationService.navigate(guardResult.redirectTo);\n    }\n    \n    return false;\n  }\n  \n  // Navigation is allowed\n  navigationService.navigate(screenName, params);\n  return true;\n};\n\n/**\n * Execute deep link navigation with validation\n */\nexport const navigateDeepLinkWithGuard = (url: string): boolean => {\n  const guardResult = validateDeepLink(url);\n  \n  if (!guardResult.canNavigate) {\n    console.warn('Deep link navigation blocked:', guardResult.message);\n    return false;\n  }\n  \n  // Deep link is valid, proceed with navigation\n  navigationService.handleDeepLink(url);\n  return true;\n};\n\n/**\n * Execute notification navigation with validation\n */\nexport const navigateFromNotificationWithGuard = (\n  notificationData: any\n): boolean => {\n  const guardResult = validateNotificationNavigation(notificationData);\n  \n  if (!guardResult.canNavigate) {\n    console.warn('Notification navigation blocked:', guardResult.message);\n    return false;\n  }\n  \n  const { type, id, screen } = notificationData;\n  \n  // Navigate based on notification type\n  switch (type) {\n    case 'event':\n      navigationService.navigateToEvent(id);\n      break;\n    case 'task':\n      navigationService.navigateToTask(id);\n      break;\n    case 'medication':\n      navigationService.navigateToMedication(id);\n      break;\n    default:\n      if (screen) {\n        navigationService.navigate(screen as keyof import('../../App').RootTabParamList);\n      }\n  }\n  \n  return true;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}