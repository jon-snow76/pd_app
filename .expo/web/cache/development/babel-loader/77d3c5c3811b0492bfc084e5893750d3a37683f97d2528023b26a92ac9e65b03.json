{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar Vector = function () {\n  function Vector(length) {\n    (0, _classCallCheck2.default)(this, Vector);\n    _defineProperty(this, \"offset\", void 0);\n    _defineProperty(this, \"length\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array(length);\n  }\n  return (0, _createClass2.default)(Vector, [{\n    key: \"get\",\n    value: function get(index) {\n      return this.elements[this.offset + index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(other) {\n      var result = 0;\n      for (var i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }], [{\n    key: \"fromVOL\",\n    value: function fromVOL(values, offset, length) {\n      var result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n  }]);\n}();\nvar Matrix = function () {\n  function Matrix(rows, columns) {\n    (0, _classCallCheck2.default)(this, Matrix);\n    _defineProperty(this, \"columns\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.columns = columns;\n    this.elements = new Array(rows * columns);\n  }\n  return (0, _createClass2.default)(Matrix, [{\n    key: \"get\",\n    value: function get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n  }, {\n    key: \"set\",\n    value: function set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }]);\n}();\nvar PolynomialFit = (0, _createClass2.default)(function PolynomialFit(degree) {\n  (0, _classCallCheck2.default)(this, PolynomialFit);\n  _defineProperty(this, \"coefficients\", void 0);\n  this.coefficients = new Array(degree + 1);\n});\nvar precisionErrorTolerance = 1e-10;\nvar LeastSquareSolver = exports.default = function () {\n  function LeastSquareSolver(x, y, w) {\n    (0, _classCallCheck2.default)(this, LeastSquareSolver);\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"w\", void 0);\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n  return (0, _createClass2.default)(LeastSquareSolver, [{\n    key: \"solve\",\n    value: function solve(degree) {\n      if (degree > this.x.length) {\n        return null;\n      }\n      var result = new PolynomialFit(degree);\n      var m = this.x.length;\n      var n = degree + 1;\n      var a = new Matrix(n, m);\n      for (var h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (var i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n      var q = new Matrix(n, m);\n      var r = new Matrix(n, m);\n      for (var j = 0; j < n; j += 1) {\n        for (var _h = 0; _h < m; _h += 1) {\n          q.set(j, _h, a.get(j, _h));\n        }\n        for (var _i = 0; _i < j; _i += 1) {\n          var dot = q.getRow(j).dot(q.getRow(_i));\n          for (var _h2 = 0; _h2 < m; _h2 += 1) {\n            q.set(j, _h2, q.get(j, _h2) - dot * q.get(_i, _h2));\n          }\n        }\n        var norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          return null;\n        }\n        var inverseNorm = 1.0 / norm;\n        for (var _h3 = 0; _h3 < m; _h3 += 1) {\n          q.set(j, _h3, q.get(j, _h3) * inverseNorm);\n        }\n        for (var _i2 = 0; _i2 < n; _i2 += 1) {\n          r.set(j, _i2, _i2 < j ? 0.0 : q.getRow(j).dot(a.getRow(_i2)));\n        }\n      }\n      var wy = new Vector(m);\n      for (var _h4 = 0; _h4 < m; _h4 += 1) {\n        wy.set(_h4, this.y[_h4] * this.w[_h4]);\n      }\n      for (var _i3 = n - 1; _i3 >= 0; _i3 -= 1) {\n        result.coefficients[_i3] = q.getRow(_i3).dot(wy);\n        for (var _j = n - 1; _j > _i3; _j -= 1) {\n          result.coefficients[_i3] -= r.get(_i3, _j) * result.coefficients[_j];\n        }\n        result.coefficients[_i3] /= r.get(_i3, _i3);\n      }\n      return result;\n    }\n  }]);\n}();","map":{"version":3,"names":["Vector","length","_classCallCheck2","default","_defineProperty","offset","elements","Array","_createClass2","key","value","get","index","set","dot","other","result","i","norm","Math","sqrt","fromVOL","values","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","exports","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/node_modules/react-native-gesture-handler/lib/module/web/tools/LeastSquareSolver.ts"],"sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n/// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  /// The polynomial coefficients of the fit.\n  ///\n  /// For each `i`, the element `coefficients[i]` is the coefficient of\n  /// the `i`-th power of the variable.\n  public coefficients: number[];\n\n  /// Creates a polynomial fit of the given degree.\n  ///\n  /// There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n/// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  /// The x-coordinates of each data point.\n  private x: number[];\n  /// The y-coordinates of each data point.\n  private y: number[];\n  /// The weight to use for each data point.\n  private w: number[];\n\n  /// Creates a least-squares solver.\n  ///\n  /// The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  /// Fits a polynomial of the given degree to the data points.\n  ///\n  /// When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}