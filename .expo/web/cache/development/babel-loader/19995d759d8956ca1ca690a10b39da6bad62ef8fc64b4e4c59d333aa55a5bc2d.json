{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRecurringEvents = exports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _react = require(\"react\");\nvar _RecurringEventsService = require(\"../services/RecurringEventsService\");\nvar useRecurringEvents = exports.useRecurringEvents = function useRecurringEvents() {\n  var generateRecurringInstances = (0, _react.useCallback)(function (baseEvent, startDate, endDate) {\n    return _RecurringEventsService.recurringEventsService.generateRecurringInstances(baseEvent, startDate, endDate);\n  }, []);\n  var createEventInstance = (0, _react.useCallback)(function (baseEvent, date) {\n    return _RecurringEventsService.recurringEventsService.createEventInstance(baseEvent, date);\n  }, []);\n  var findNextOccurrence = (0, _react.useCallback)(function (baseEvent, fromDate) {\n    return _RecurringEventsService.recurringEventsService.findNextOccurrence(baseEvent, fromDate);\n  }, []);\n  var shouldEventOccurOnDate = (0, _react.useCallback)(function (baseEvent, targetDate) {\n    return _RecurringEventsService.recurringEventsService.shouldEventOccurOnDate(baseEvent, targetDate);\n  }, []);\n  var getRecurringEventsForDate = (0, _react.useCallback)(function (recurringEvents, targetDate) {\n    return _RecurringEventsService.recurringEventsService.getRecurringEventsForDate(recurringEvents, targetDate);\n  }, []);\n  var validateRecurrencePattern = (0, _react.useCallback)(function (pattern) {\n    return _RecurringEventsService.recurringEventsService.validateRecurrencePattern(pattern);\n  }, []);\n  var getRecurrenceDescription = (0, _react.useCallback)(function (pattern) {\n    return _RecurringEventsService.recurringEventsService.getRecurrenceDescription(pattern);\n  }, []);\n  var getUpcomingOccurrences = (0, _react.useCallback)(function (baseEvent, count) {\n    return _RecurringEventsService.recurringEventsService.getUpcomingOccurrences(baseEvent, count);\n  }, []);\n  var getEventsForDate = (0, _react.useCallback)(function (regularEvents, recurringEvents, targetDate) {\n    var dateEvents = regularEvents.filter(function (event) {\n      var eventDate = new Date(event.startTime);\n      return eventDate.toDateString() === targetDate.toDateString();\n    });\n    var recurringInstances = getRecurringEventsForDate(recurringEvents, targetDate);\n    return [].concat((0, _toConsumableArray2.default)(dateEvents), (0, _toConsumableArray2.default)(recurringInstances)).sort(function (a, b) {\n      return new Date(a.startTime).getTime() - new Date(b.startTime).getTime();\n    });\n  }, [getRecurringEventsForDate]);\n  var getEventsInRange = (0, _react.useCallback)(function (regularEvents, recurringEvents, startDate, endDate) {\n    var rangeEvents = regularEvents.filter(function (event) {\n      var eventDate = new Date(event.startTime);\n      return eventDate >= startDate && eventDate <= endDate;\n    });\n    var recurringInstances = [];\n    recurringEvents.forEach(function (baseEvent) {\n      var instances = generateRecurringInstances(baseEvent, startDate, endDate);\n      recurringInstances.push.apply(recurringInstances, (0, _toConsumableArray2.default)(instances));\n    });\n    return [].concat((0, _toConsumableArray2.default)(rangeEvents), recurringInstances).sort(function (a, b) {\n      return new Date(a.startTime).getTime() - new Date(b.startTime).getTime();\n    });\n  }, [generateRecurringInstances]);\n  var recurrencePatterns = (0, _react.useMemo)(function () {\n    return {\n      daily: {\n        type: 'daily',\n        interval: 1\n      },\n      weekly: {\n        type: 'weekly',\n        interval: 1\n      },\n      monthly: {\n        type: 'monthly',\n        interval: 1\n      },\n      everyTwoDays: {\n        type: 'daily',\n        interval: 2\n      },\n      everyWeekday: {\n        type: 'custom',\n        interval: 1,\n        daysOfWeek: [1, 2, 3, 4, 5]\n      },\n      everyWeekend: {\n        type: 'custom',\n        interval: 1,\n        daysOfWeek: [0, 6]\n      }\n    };\n  }, []);\n  return {\n    generateRecurringInstances: generateRecurringInstances,\n    createEventInstance: createEventInstance,\n    findNextOccurrence: findNextOccurrence,\n    shouldEventOccurOnDate: shouldEventOccurOnDate,\n    getRecurringEventsForDate: getRecurringEventsForDate,\n    validateRecurrencePattern: validateRecurrencePattern,\n    getRecurrenceDescription: getRecurrenceDescription,\n    getUpcomingOccurrences: getUpcomingOccurrences,\n    getEventsForDate: getEventsForDate,\n    getEventsInRange: getEventsInRange,\n    recurrencePatterns: recurrencePatterns\n  };\n};\nvar _default = exports.default = useRecurringEvents;","map":{"version":3,"names":["_react","require","_RecurringEventsService","useRecurringEvents","exports","generateRecurringInstances","useCallback","baseEvent","startDate","endDate","recurringEventsService","createEventInstance","date","findNextOccurrence","fromDate","shouldEventOccurOnDate","targetDate","getRecurringEventsForDate","recurringEvents","validateRecurrencePattern","pattern","getRecurrenceDescription","getUpcomingOccurrences","count","getEventsForDate","regularEvents","dateEvents","filter","event","eventDate","Date","startTime","toDateString","recurringInstances","concat","_toConsumableArray2","default","sort","a","b","getTime","getEventsInRange","rangeEvents","forEach","instances","push","apply","recurrencePatterns","useMemo","daily","type","interval","weekly","monthly","everyTwoDays","everyWeekday","daysOfWeek","everyWeekend","_default"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/hooks/useRecurringEvents.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { recurringEventsService, RecurrencePattern } from '../services/RecurringEventsService';\nimport { TimetableEvent } from '../types';\n\n/**\n * Hook for managing recurring events\n */\nexport const useRecurringEvents = () => {\n  const generateRecurringInstances = useCallback((\n    baseEvent: TimetableEvent,\n    startDate: Date,\n    endDate: Date\n  ): TimetableEvent[] => {\n    return recurringEventsService.generateRecurringInstances(baseEvent, startDate, endDate);\n  }, []);\n\n  const createEventInstance = useCallback((\n    baseEvent: TimetableEvent,\n    date: Date\n  ): TimetableEvent => {\n    return recurringEventsService.createEventInstance(baseEvent, date);\n  }, []);\n\n  const findNextOccurrence = useCallback((\n    baseEvent: TimetableEvent,\n    fromDate: Date\n  ): Date => {\n    return recurringEventsService.findNextOccurrence(baseEvent, fromDate);\n  }, []);\n\n  const shouldEventOccurOnDate = useCallback((\n    baseEvent: TimetableEvent,\n    targetDate: Date\n  ): boolean => {\n    return recurringEventsService.shouldEventOccurOnDate(baseEvent, targetDate);\n  }, []);\n\n  const getRecurringEventsForDate = useCallback((\n    recurringEvents: TimetableEvent[],\n    targetDate: Date\n  ): TimetableEvent[] => {\n    return recurringEventsService.getRecurringEventsForDate(recurringEvents, targetDate);\n  }, []);\n\n  const validateRecurrencePattern = useCallback((\n    pattern: RecurrencePattern\n  ): boolean => {\n    return recurringEventsService.validateRecurrencePattern(pattern);\n  }, []);\n\n  const getRecurrenceDescription = useCallback((\n    pattern: RecurrencePattern\n  ): string => {\n    return recurringEventsService.getRecurrenceDescription(pattern);\n  }, []);\n\n  const getUpcomingOccurrences = useCallback((\n    baseEvent: TimetableEvent,\n    count?: number\n  ): Date[] => {\n    return recurringEventsService.getUpcomingOccurrences(baseEvent, count);\n  }, []);\n\n  // Helper function to combine regular and recurring events for a specific date\n  const getEventsForDate = useCallback((\n    regularEvents: TimetableEvent[],\n    recurringEvents: TimetableEvent[],\n    targetDate: Date\n  ): TimetableEvent[] => {\n    // Get regular events for the date\n    const dateEvents = regularEvents.filter(event => {\n      const eventDate = new Date(event.startTime);\n      return eventDate.toDateString() === targetDate.toDateString();\n    });\n\n    // Get recurring event instances for the date\n    const recurringInstances = getRecurringEventsForDate(recurringEvents, targetDate);\n\n    // Combine and sort by start time\n    return [...dateEvents, ...recurringInstances].sort((a, b) => \n      new Date(a.startTime).getTime() - new Date(b.startTime).getTime()\n    );\n  }, [getRecurringEventsForDate]);\n\n  // Helper function to get all events in a date range\n  const getEventsInRange = useCallback((\n    regularEvents: TimetableEvent[],\n    recurringEvents: TimetableEvent[],\n    startDate: Date,\n    endDate: Date\n  ): TimetableEvent[] => {\n    // Get regular events in range\n    const rangeEvents = regularEvents.filter(event => {\n      const eventDate = new Date(event.startTime);\n      return eventDate >= startDate && eventDate <= endDate;\n    });\n\n    // Get recurring event instances in range\n    const recurringInstances: TimetableEvent[] = [];\n    recurringEvents.forEach(baseEvent => {\n      const instances = generateRecurringInstances(baseEvent, startDate, endDate);\n      recurringInstances.push(...instances);\n    });\n\n    // Combine and sort by start time\n    return [...rangeEvents, ...recurringInstances].sort((a, b) => \n      new Date(a.startTime).getTime() - new Date(b.startTime).getTime()\n    );\n  }, [generateRecurringInstances]);\n\n  // Predefined recurrence patterns for easy use\n  const recurrencePatterns = useMemo(() => ({\n    daily: { type: 'daily' as const, interval: 1 },\n    weekly: { type: 'weekly' as const, interval: 1 },\n    monthly: { type: 'monthly' as const, interval: 1 },\n    everyTwoDays: { type: 'daily' as const, interval: 2 },\n    everyWeekday: { type: 'custom' as const, interval: 1, daysOfWeek: [1, 2, 3, 4, 5] },\n    everyWeekend: { type: 'custom' as const, interval: 1, daysOfWeek: [0, 6] },\n  }), []);\n\n  return {\n    generateRecurringInstances,\n    createEventInstance,\n    findNextOccurrence,\n    shouldEventOccurOnDate,\n    getRecurringEventsForDate,\n    validateRecurrencePattern,\n    getRecurrenceDescription,\n    getUpcomingOccurrences,\n    getEventsForDate,\n    getEventsInRange,\n    recurrencePatterns,\n  };\n};\n\nexport default useRecurringEvents;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}