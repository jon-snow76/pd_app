{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduleTimetableEventReminder = exports.scheduleTaskReminder = exports.scheduleMedicationReminder = exports.scheduleHighPriorityTaskReminder = exports.rescheduleNotificationsForTasks = exports.rescheduleNotificationsForEvents = exports.initializeNotifications = exports.handleNotificationTap = exports.handleNotificationAction = exports.getScheduledNotifications = exports.checkNotificationPermissions = exports.cancelNotificationsForItem = exports.cancelNotification = exports.cancelAllNotifications = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _reactNative = require(\"react-native\");\nvar _helpers = require(\"./helpers\");\nvar initializeNotifications = exports.initializeNotifications = function initializeNotifications() {\n  return new Promise(function (resolve) {\n    PushNotification.configure({\n      onRegister: function onRegister(token) {\n        console.log('TOKEN:', token);\n      },\n      onNotification: function onNotification(notification) {\n        console.log('NOTIFICATION:', notification);\n        if (notification.userInteraction) {\n          handleNotificationTap(notification);\n        }\n        notification.finish(PushNotification.FetchResult.NoData);\n      },\n      onRegistrationError: function onRegistrationError(err) {\n        console.error(err.message, err);\n      },\n      onRemoteNotification: function onRemoteNotification(notification) {\n        console.log('REMOTE NOTIFICATION:', notification);\n      },\n      senderID: 'YOUR_SENDER_ID',\n      requestPermissions: _reactNative.Platform.OS === 'ios',\n      popInitialNotification: true\n    });\n    if (_reactNative.Platform.OS === 'ios') {\n      PushNotification.requestPermissions().then(function (permissions) {\n        console.log('Notification permissions:', permissions);\n        resolve(permissions.alert || permissions.badge || permissions.sound);\n      }).catch(function (error) {\n        console.error('Failed to request permissions:', error);\n        resolve(false);\n      });\n    } else {\n      resolve(true);\n    }\n  });\n};\nvar checkNotificationPermissions = exports.checkNotificationPermissions = function checkNotificationPermissions() {\n  return new Promise(function (resolve) {\n    PushNotification.checkPermissions(function (permissions) {\n      var hasPermissions = permissions.alert || permissions.badge || permissions.sound;\n      resolve(hasPermissions);\n    });\n  });\n};\nvar scheduleTimetableEventReminder = exports.scheduleTimetableEventReminder = function scheduleTimetableEventReminder(event) {\n  var reminderOffsetMinutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;\n  if (!event.notificationEnabled) {\n    return;\n  }\n  var reminderTime = new Date(event.startTime.getTime() - reminderOffsetMinutes * 60000);\n  var now = new Date();\n  if (reminderTime <= now) {\n    return;\n  }\n  var notificationId = `timetable_${event.id}`;\n  cancelNotification(notificationId);\n  var notificationData = {\n    id: notificationId,\n    type: 'timetable_event',\n    itemId: event.id,\n    title: `Upcoming: ${event.title}`,\n    message: `Starting in ${reminderOffsetMinutes} minutes at ${(0, _helpers.formatTimeString)(event.startTime)}`,\n    data: {\n      eventId: event.id,\n      eventTitle: event.title,\n      startTime: event.startTime.toISOString(),\n      category: event.category\n    }\n  };\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'high',\n    priority: 'high',\n    userInfo: notificationData,\n    actions: ['View Event', 'Dismiss'],\n    category: 'TIMETABLE_EVENT'\n  });\n  console.log(`Scheduled timetable reminder for ${event.title} at ${reminderTime}`);\n};\nvar scheduleTaskReminder = exports.scheduleTaskReminder = function scheduleTaskReminder(task) {\n  var reminderType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'due_today';\n  var now = new Date();\n  var reminderTime;\n  var title;\n  var message;\n  if (reminderType === 'due_today') {\n    reminderTime = new Date(task.dueDate);\n    reminderTime.setHours(9, 0, 0, 0);\n    title = `Task Due Today: ${task.title}`;\n    message = `Don't forget to complete your ${task.priority} priority task`;\n  } else {\n    reminderTime = new Date(task.dueDate.getTime() + 60 * 60 * 1000);\n    title = `Overdue Task: ${task.title}`;\n    message = `This ${task.priority} priority task is now overdue`;\n  }\n  if (reminderTime <= now || task.isCompleted) {\n    return;\n  }\n  var notificationId = `task_${task.id}_${reminderType}`;\n  cancelNotification(notificationId);\n  var notificationData = {\n    id: notificationId,\n    type: 'task_reminder',\n    itemId: task.id,\n    title: title,\n    message: message,\n    data: {\n      taskId: task.id,\n      taskTitle: task.title,\n      priority: task.priority,\n      dueDate: task.dueDate.toISOString(),\n      category: task.category,\n      reminderType: reminderType\n    }\n  };\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: task.priority === 'high' ? 'max' : 'high',\n    priority: task.priority === 'high' ? 'max' : 'high',\n    userInfo: notificationData,\n    actions: ['View Task', 'Mark Complete', 'Dismiss'],\n    category: 'TASK_REMINDER'\n  });\n  console.log(`Scheduled task reminder for ${task.title} at ${reminderTime}`);\n};\nvar scheduleHighPriorityTaskReminder = exports.scheduleHighPriorityTaskReminder = function scheduleHighPriorityTaskReminder(tasks) {\n  var highPriorityTasks = tasks.filter(function (task) {\n    return task.priority === 'high' && !task.isCompleted;\n  });\n  if (highPriorityTasks.length === 0) {\n    return;\n  }\n  var tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  tomorrow.setHours(8, 0, 0, 0);\n  var notificationId = 'high_priority_morning';\n  cancelNotification(notificationId);\n  var taskTitles = highPriorityTasks.slice(0, 3).map(function (task) {\n    return task.title;\n  }).join(', ');\n  var remainingCount = Math.max(0, highPriorityTasks.length - 3);\n  var message = `You have ${highPriorityTasks.length} high-priority task${highPriorityTasks.length > 1 ? 's' : ''}: ${taskTitles}`;\n  if (remainingCount > 0) {\n    message += ` and ${remainingCount} more`;\n  }\n  var notificationData = {\n    id: notificationId,\n    type: 'task_reminder',\n    itemId: 'high_priority_batch',\n    title: 'High Priority Tasks',\n    message: message,\n    data: {\n      taskIds: highPriorityTasks.map(function (task) {\n        return task.id;\n      }),\n      count: highPriorityTasks.length\n    }\n  };\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: tomorrow,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'high',\n    priority: 'high',\n    userInfo: notificationData,\n    actions: ['View Tasks', 'Dismiss'],\n    category: 'HIGH_PRIORITY_TASKS'\n  });\n  console.log(`Scheduled high-priority tasks reminder for ${tomorrow}`);\n};\nvar scheduleMedicationReminder = exports.scheduleMedicationReminder = function scheduleMedicationReminder(medicineName, time, medicationId) {\n  var _time$split$map = time.split(':').map(Number),\n    _time$split$map2 = (0, _slicedToArray2.default)(_time$split$map, 2),\n    hours = _time$split$map2[0],\n    minutes = _time$split$map2[1];\n  var now = new Date();\n  var reminderTime = new Date();\n  reminderTime.setHours(hours, minutes, 0, 0);\n  if (reminderTime <= now) {\n    reminderTime.setDate(reminderTime.getDate() + 1);\n  }\n  var notificationId = `medication_${medicationId}_${time}`;\n  cancelNotification(notificationId);\n  var notificationData = {\n    id: notificationId,\n    type: 'medication_reminder',\n    itemId: medicationId,\n    title: `Time for ${medicineName}`,\n    message: `Don't forget to take your medication`,\n    data: {\n      medicationId: medicationId,\n      medicineName: medicineName,\n      time: time\n    }\n  };\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'max',\n    priority: 'max',\n    repeatType: 'day',\n    userInfo: notificationData,\n    actions: ['Mark Taken', 'Snooze', 'Dismiss'],\n    category: 'MEDICATION_REMINDER'\n  });\n  console.log(`Scheduled medication reminder for ${medicineName} at ${time}`);\n};\nvar cancelNotification = exports.cancelNotification = function cancelNotification(notificationId) {\n  PushNotification.cancelLocalNotifications({\n    id: notificationId\n  });\n  console.log(`Cancelled notification: ${notificationId}`);\n};\nvar cancelNotificationsForItem = exports.cancelNotificationsForItem = function cancelNotificationsForItem(itemId, type) {\n  PushNotification.getScheduledLocalNotifications(function (notifications) {\n    notifications.forEach(function (notification) {\n      var userData = notification.userInfo;\n      if (userData && userData.type === type && userData.itemId === itemId) {\n        cancelNotification(userData.id);\n      }\n    });\n  });\n};\nvar cancelAllNotifications = exports.cancelAllNotifications = function cancelAllNotifications() {\n  PushNotification.cancelAllLocalNotifications();\n  console.log('Cancelled all notifications');\n};\nvar handleNotificationTap = exports.handleNotificationTap = function handleNotificationTap(notification) {\n  var notificationData = notification.userInfo;\n  if (!notificationData) {\n    return;\n  }\n  console.log('Handling notification tap:', notificationData);\n  import(\"../services/NavigationService\").then(function (_ref) {\n    var navigationService = _ref.navigationService;\n    navigationService.handleNotificationTap(Object.assign({\n      type: notificationData.type,\n      itemId: notificationData.itemId\n    }, notificationData.data));\n  }).catch(function (error) {\n    console.error('Error importing navigation service:', error);\n  });\n};\nvar handleNotificationAction = exports.handleNotificationAction = function handleNotificationAction(action, notificationData) {\n  console.log('Handling notification action:', action, notificationData);\n  switch (action) {\n    case 'View Event':\n    case 'View Task':\n    case 'View Tasks':\n      handleNotificationTap({\n        userInfo: notificationData\n      });\n      break;\n    case 'Mark Complete':\n      console.log('Mark task complete:', notificationData.itemId);\n      break;\n    case 'Mark Taken':\n      console.log('Mark medication taken:', notificationData.itemId);\n      break;\n    case 'Snooze':\n      var snoozeTime = new Date(Date.now() + 10 * 60 * 1000);\n      PushNotification.localNotificationSchedule({\n        id: `${notificationData.id}_snooze`,\n        title: notificationData.title,\n        message: `${notificationData.message} (Snoozed)`,\n        date: snoozeTime,\n        soundName: 'default',\n        userInfo: notificationData\n      });\n      break;\n    case 'Dismiss':\n    default:\n      break;\n  }\n};\nvar getScheduledNotifications = exports.getScheduledNotifications = function getScheduledNotifications() {\n  return new Promise(function (resolve) {\n    PushNotification.getScheduledLocalNotifications(function (notifications) {\n      resolve(notifications);\n    });\n  });\n};\nvar rescheduleNotificationsForEvents = exports.rescheduleNotificationsForEvents = function rescheduleNotificationsForEvents(events) {\n  var reminderOffsetMinutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;\n  events.forEach(function (event) {\n    cancelNotificationsForItem(event.id, 'timetable_event');\n  });\n  events.forEach(function (event) {\n    scheduleTimetableEventReminder(event, reminderOffsetMinutes);\n  });\n};\nvar rescheduleNotificationsForTasks = exports.rescheduleNotificationsForTasks = function rescheduleNotificationsForTasks(tasks) {\n  tasks.forEach(function (task) {\n    cancelNotificationsForItem(task.id, 'task_reminder');\n  });\n  var incompleteTasks = tasks.filter(function (task) {\n    return !task.isCompleted;\n  });\n  incompleteTasks.forEach(function (task) {\n    var today = new Date();\n    var taskDueDate = new Date(task.dueDate);\n    if (taskDueDate.getFullYear() === today.getFullYear() && taskDueDate.getMonth() === today.getMonth() && taskDueDate.getDate() === today.getDate()) {\n      scheduleTaskReminder(task, 'due_today');\n    }\n    if (task.priority === 'high' && taskDueDate < today) {\n      scheduleTaskReminder(task, 'overdue');\n    }\n  });\n  scheduleHighPriorityTaskReminder(incompleteTasks);\n};","map":{"version":3,"names":["_reactNative","require","_helpers","initializeNotifications","exports","Promise","resolve","PushNotification","configure","onRegister","token","console","log","onNotification","notification","userInteraction","handleNotificationTap","finish","FetchResult","NoData","onRegistrationError","err","error","message","onRemoteNotification","senderID","requestPermissions","Platform","OS","popInitialNotification","then","permissions","alert","badge","sound","catch","checkNotificationPermissions","checkPermissions","hasPermissions","scheduleTimetableEventReminder","event","reminderOffsetMinutes","arguments","length","undefined","notificationEnabled","reminderTime","Date","startTime","getTime","now","notificationId","id","cancelNotification","notificationData","type","itemId","title","formatTimeString","data","eventId","eventTitle","toISOString","category","localNotificationSchedule","date","soundName","playSound","vibrate","vibration","importance","priority","userInfo","actions","scheduleTaskReminder","task","reminderType","dueDate","setHours","isCompleted","taskId","taskTitle","scheduleHighPriorityTaskReminder","tasks","highPriorityTasks","filter","tomorrow","setDate","getDate","taskTitles","slice","map","join","remainingCount","Math","max","taskIds","count","scheduleMedicationReminder","medicineName","time","medicationId","_time$split$map","split","Number","_time$split$map2","_slicedToArray2","default","hours","minutes","repeatType","cancelLocalNotifications","cancelNotificationsForItem","getScheduledLocalNotifications","notifications","forEach","userData","cancelAllNotifications","cancelAllLocalNotifications","_ref","navigationService","Object","assign","handleNotificationAction","action","snoozeTime","getScheduledNotifications","rescheduleNotificationsForEvents","events","rescheduleNotificationsForTasks","incompleteTasks","today","taskDueDate","getFullYear","getMonth"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/src/utils/notifications.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport { Platform } from 'react-native';\nimport { TimetableEvent, Task } from '../types';\nimport { formatTimeString, formatDateString } from './helpers';\n\n// Notification types\nexport type NotificationType = 'timetable_event' | 'task_reminder' | 'medication_reminder';\n\nexport interface NotificationData {\n  id: string;\n  type: NotificationType;\n  itemId: string;\n  title: string;\n  message: string;\n  data?: any;\n}\n\n/**\n * Initialize push notifications\n */\nexport const initializeNotifications = (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    PushNotification.configure({\n      // Called when token is generated (iOS and Android)\n      onRegister: function (token) {\n        console.log('TOKEN:', token);\n      },\n\n      // Called when a remote or local notification is opened or received\n      onNotification: function (notification) {\n        console.log('NOTIFICATION:', notification);\n        \n        // Handle notification tap\n        if (notification.userInteraction) {\n          handleNotificationTap(notification);\n        }\n\n        // Required on iOS only\n        notification.finish(PushNotification.FetchResult.NoData);\n      },\n\n      // Called when the user fails to register for remote notifications\n      onRegistrationError: function (err) {\n        console.error(err.message, err);\n      },\n\n      // IOS ONLY: Called when a remote notification is received while app is in foreground\n      onRemoteNotification: function (notification) {\n        console.log('REMOTE NOTIFICATION:', notification);\n      },\n\n      // Android only: GCM or FCM Sender ID\n      senderID: 'YOUR_SENDER_ID',\n\n      // IOS only: if true, app will request permissions on launch\n      requestPermissions: Platform.OS === 'ios',\n\n      // Should the initial notification be popped automatically\n      popInitialNotification: true,\n    });\n\n    // Request permissions for iOS\n    if (Platform.OS === 'ios') {\n      PushNotification.requestPermissions()\n        .then((permissions) => {\n          console.log('Notification permissions:', permissions);\n          resolve(permissions.alert || permissions.badge || permissions.sound);\n        })\n        .catch((error) => {\n          console.error('Failed to request permissions:', error);\n          resolve(false);\n        });\n    } else {\n      resolve(true);\n    }\n  });\n};\n\n/**\n * Check if notifications are enabled\n */\nexport const checkNotificationPermissions = (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    PushNotification.checkPermissions((permissions) => {\n      const hasPermissions = permissions.alert || permissions.badge || permissions.sound;\n      resolve(hasPermissions);\n    });\n  });\n};\n\n/**\n * Schedule a timetable event reminder\n */\nexport const scheduleTimetableEventReminder = (\n  event: TimetableEvent,\n  reminderOffsetMinutes: number = 15\n): void => {\n  if (!event.notificationEnabled) {\n    return;\n  }\n\n  const reminderTime = new Date(event.startTime.getTime() - reminderOffsetMinutes * 60000);\n  const now = new Date();\n\n  // Don't schedule notifications for past events\n  if (reminderTime <= now) {\n    return;\n  }\n\n  const notificationId = `timetable_${event.id}`;\n  \n  // Cancel existing notification for this event\n  cancelNotification(notificationId);\n\n  const notificationData: NotificationData = {\n    id: notificationId,\n    type: 'timetable_event',\n    itemId: event.id,\n    title: `Upcoming: ${event.title}`,\n    message: `Starting in ${reminderOffsetMinutes} minutes at ${formatTimeString(event.startTime)}`,\n    data: {\n      eventId: event.id,\n      eventTitle: event.title,\n      startTime: event.startTime.toISOString(),\n      category: event.category,\n    },\n  };\n\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'high',\n    priority: 'high',\n    userInfo: notificationData,\n    actions: ['View Event', 'Dismiss'],\n    category: 'TIMETABLE_EVENT',\n  });\n\n  console.log(`Scheduled timetable reminder for ${event.title} at ${reminderTime}`);\n};\n\n/**\n * Schedule task reminder notifications\n */\nexport const scheduleTaskReminder = (task: Task, reminderType: 'due_today' | 'overdue' = 'due_today'): void => {\n  const now = new Date();\n  let reminderTime: Date;\n  let title: string;\n  let message: string;\n\n  if (reminderType === 'due_today') {\n    // Schedule for 9 AM on the due date\n    reminderTime = new Date(task.dueDate);\n    reminderTime.setHours(9, 0, 0, 0);\n    \n    title = `Task Due Today: ${task.title}`;\n    message = `Don't forget to complete your ${task.priority} priority task`;\n  } else {\n    // Schedule overdue reminder for 1 hour after due date\n    reminderTime = new Date(task.dueDate.getTime() + 60 * 60 * 1000);\n    \n    title = `Overdue Task: ${task.title}`;\n    message = `This ${task.priority} priority task is now overdue`;\n  }\n\n  // Don't schedule notifications for past times or completed tasks\n  if (reminderTime <= now || task.isCompleted) {\n    return;\n  }\n\n  const notificationId = `task_${task.id}_${reminderType}`;\n  \n  // Cancel existing notification\n  cancelNotification(notificationId);\n\n  const notificationData: NotificationData = {\n    id: notificationId,\n    type: 'task_reminder',\n    itemId: task.id,\n    title,\n    message,\n    data: {\n      taskId: task.id,\n      taskTitle: task.title,\n      priority: task.priority,\n      dueDate: task.dueDate.toISOString(),\n      category: task.category,\n      reminderType,\n    },\n  };\n\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: task.priority === 'high' ? 'max' : 'high',\n    priority: task.priority === 'high' ? 'max' : 'high',\n    userInfo: notificationData,\n    actions: ['View Task', 'Mark Complete', 'Dismiss'],\n    category: 'TASK_REMINDER',\n  });\n\n  console.log(`Scheduled task reminder for ${task.title} at ${reminderTime}`);\n};\n\n/**\n * Schedule high-priority task morning reminder\n */\nexport const scheduleHighPriorityTaskReminder = (tasks: Task[]): void => {\n  const highPriorityTasks = tasks.filter(\n    task => task.priority === 'high' && !task.isCompleted\n  );\n\n  if (highPriorityTasks.length === 0) {\n    return;\n  }\n\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  tomorrow.setHours(8, 0, 0, 0); // 8 AM reminder\n\n  const notificationId = 'high_priority_morning';\n  \n  // Cancel existing notification\n  cancelNotification(notificationId);\n\n  const taskTitles = highPriorityTasks.slice(0, 3).map(task => task.title).join(', ');\n  const remainingCount = Math.max(0, highPriorityTasks.length - 3);\n  \n  let message = `You have ${highPriorityTasks.length} high-priority task${highPriorityTasks.length > 1 ? 's' : ''}: ${taskTitles}`;\n  if (remainingCount > 0) {\n    message += ` and ${remainingCount} more`;\n  }\n\n  const notificationData: NotificationData = {\n    id: notificationId,\n    type: 'task_reminder',\n    itemId: 'high_priority_batch',\n    title: 'High Priority Tasks',\n    message,\n    data: {\n      taskIds: highPriorityTasks.map(task => task.id),\n      count: highPriorityTasks.length,\n    },\n  };\n\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: tomorrow,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'high',\n    priority: 'high',\n    userInfo: notificationData,\n    actions: ['View Tasks', 'Dismiss'],\n    category: 'HIGH_PRIORITY_TASKS',\n  });\n\n  console.log(`Scheduled high-priority tasks reminder for ${tomorrow}`);\n};\n\n/**\n * Schedule medication reminder (enhanced from existing)\n */\nexport const scheduleMedicationReminder = (\n  medicineName: string,\n  time: string,\n  medicationId: string\n): void => {\n  const [hours, minutes] = time.split(':').map(Number);\n  const now = new Date();\n  const reminderTime = new Date();\n  reminderTime.setHours(hours, minutes, 0, 0);\n\n  // If the time has passed today, schedule for tomorrow\n  if (reminderTime <= now) {\n    reminderTime.setDate(reminderTime.getDate() + 1);\n  }\n\n  const notificationId = `medication_${medicationId}_${time}`;\n  \n  // Cancel existing notification\n  cancelNotification(notificationId);\n\n  const notificationData: NotificationData = {\n    id: notificationId,\n    type: 'medication_reminder',\n    itemId: medicationId,\n    title: `Time for ${medicineName}`,\n    message: `Don't forget to take your medication`,\n    data: {\n      medicationId,\n      medicineName,\n      time,\n    },\n  };\n\n  PushNotification.localNotificationSchedule({\n    id: notificationId,\n    title: notificationData.title,\n    message: notificationData.message,\n    date: reminderTime,\n    soundName: 'default',\n    playSound: true,\n    vibrate: true,\n    vibration: 300,\n    importance: 'max',\n    priority: 'max',\n    repeatType: 'day', // Repeat daily\n    userInfo: notificationData,\n    actions: ['Mark Taken', 'Snooze', 'Dismiss'],\n    category: 'MEDICATION_REMINDER',\n  });\n\n  console.log(`Scheduled medication reminder for ${medicineName} at ${time}`);\n};\n\n/**\n * Cancel a specific notification\n */\nexport const cancelNotification = (notificationId: string): void => {\n  PushNotification.cancelLocalNotifications({ id: notificationId });\n  console.log(`Cancelled notification: ${notificationId}`);\n};\n\n/**\n * Cancel all notifications for a specific item\n */\nexport const cancelNotificationsForItem = (itemId: string, type: NotificationType): void => {\n  // Get all scheduled notifications and cancel matching ones\n  PushNotification.getScheduledLocalNotifications((notifications) => {\n    notifications.forEach((notification) => {\n      const userData = notification.userInfo as NotificationData;\n      if (userData && userData.type === type && userData.itemId === itemId) {\n        cancelNotification(userData.id);\n      }\n    });\n  });\n};\n\n/**\n * Cancel all notifications\n */\nexport const cancelAllNotifications = (): void => {\n  PushNotification.cancelAllLocalNotifications();\n  console.log('Cancelled all notifications');\n};\n\n/**\n * Handle notification tap\n */\nexport const handleNotificationTap = (notification: any): void => {\n  const notificationData = notification.userInfo as NotificationData;\n  \n  if (!notificationData) {\n    return;\n  }\n\n  console.log('Handling notification tap:', notificationData);\n\n  // Import navigation service dynamically to avoid circular dependencies\n  import('../services/NavigationService').then(({ navigationService }) => {\n    navigationService.handleNotificationTap({\n      type: notificationData.type,\n      itemId: notificationData.itemId,\n      ...notificationData.data,\n    });\n  }).catch(error => {\n    console.error('Error importing navigation service:', error);\n  });\n};\n\n/**\n * Handle notification actions\n */\nexport const handleNotificationAction = (action: string, notificationData: NotificationData): void => {\n  console.log('Handling notification action:', action, notificationData);\n\n  switch (action) {\n    case 'View Event':\n    case 'View Task':\n    case 'View Tasks':\n      handleNotificationTap({ userInfo: notificationData });\n      break;\n      \n    case 'Mark Complete':\n      // This would call the task completion function\n      console.log('Mark task complete:', notificationData.itemId);\n      break;\n      \n    case 'Mark Taken':\n      // This would call the medication taken function\n      console.log('Mark medication taken:', notificationData.itemId);\n      break;\n      \n    case 'Snooze':\n      // Reschedule notification for 10 minutes later\n      const snoozeTime = new Date(Date.now() + 10 * 60 * 1000);\n      PushNotification.localNotificationSchedule({\n        id: `${notificationData.id}_snooze`,\n        title: notificationData.title,\n        message: `${notificationData.message} (Snoozed)`,\n        date: snoozeTime,\n        soundName: 'default',\n        userInfo: notificationData,\n      });\n      break;\n      \n    case 'Dismiss':\n    default:\n      // Do nothing, notification is dismissed\n      break;\n  }\n};\n\n/**\n * Get all scheduled notifications\n */\nexport const getScheduledNotifications = (): Promise<any[]> => {\n  return new Promise((resolve) => {\n    PushNotification.getScheduledLocalNotifications((notifications) => {\n      resolve(notifications);\n    });\n  });\n};\n\n/**\n * Reschedule all notifications for updated items\n */\nexport const rescheduleNotificationsForEvents = (\n  events: TimetableEvent[],\n  reminderOffsetMinutes: number = 15\n): void => {\n  // Cancel all existing timetable notifications\n  events.forEach(event => {\n    cancelNotificationsForItem(event.id, 'timetable_event');\n  });\n\n  // Schedule new notifications\n  events.forEach(event => {\n    scheduleTimetableEventReminder(event, reminderOffsetMinutes);\n  });\n};\n\n/**\n * Reschedule all notifications for updated tasks\n */\nexport const rescheduleNotificationsForTasks = (tasks: Task[]): void => {\n  // Cancel all existing task notifications\n  tasks.forEach(task => {\n    cancelNotificationsForItem(task.id, 'task_reminder');\n  });\n\n  // Schedule new notifications for incomplete tasks\n  const incompleteTasks = tasks.filter(task => !task.isCompleted);\n  \n  incompleteTasks.forEach(task => {\n    // Schedule due today reminder\n    const today = new Date();\n    const taskDueDate = new Date(task.dueDate);\n    \n    if (\n      taskDueDate.getFullYear() === today.getFullYear() &&\n      taskDueDate.getMonth() === today.getMonth() &&\n      taskDueDate.getDate() === today.getDate()\n    ) {\n      scheduleTaskReminder(task, 'due_today');\n    }\n    \n    // Schedule overdue reminder if task is high priority\n    if (task.priority === 'high' && taskDueDate < today) {\n      scheduleTaskReminder(task, 'overdue');\n    }\n  });\n\n  // Schedule high-priority morning reminder\n  scheduleHighPriorityTaskReminder(incompleteTasks);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}