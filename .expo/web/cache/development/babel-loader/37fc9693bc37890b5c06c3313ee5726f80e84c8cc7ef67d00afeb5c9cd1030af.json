{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.navigationService = exports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _navigationGuards = require(\"../utils/navigationGuards\");\nvar NavigationService = function () {\n  function NavigationService() {\n    (0, _classCallCheck2.default)(this, NavigationService);\n    this.navigationRef = null;\n  }\n  return (0, _createClass2.default)(NavigationService, [{\n    key: \"setNavigationRef\",\n    value: function setNavigationRef(ref) {\n      this.navigationRef = ref;\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(screenName, params) {\n      var _this$navigationRef;\n      if ((_this$navigationRef = this.navigationRef) != null && _this$navigationRef.current) {\n        this.navigationRef.current.navigate(screenName, params);\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack() {\n      var _this$navigationRef2;\n      if ((_this$navigationRef2 = this.navigationRef) != null && _this$navigationRef2.current) {\n        this.navigationRef.current.goBack();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(screenName) {\n      var _this$navigationRef3;\n      if ((_this$navigationRef3 = this.navigationRef) != null && _this$navigationRef3.current) {\n        this.navigationRef.current.reset({\n          index: 0,\n          routes: [{\n            name: screenName\n          }]\n        });\n      }\n    }\n  }, {\n    key: \"handleDeepLink\",\n    value: function handleDeepLink(url) {\n      var guardResult = (0, _navigationGuards.validateDeepLink)(url);\n      if (!guardResult.canNavigate) {\n        console.warn('Deep link blocked:', guardResult.message);\n        return;\n      }\n      try {\n        var urlObj = new URL(url);\n        var path = urlObj.pathname;\n        switch (path) {\n          case '/timetable':\n            this.navigate('Timetable');\n            break;\n          case '/tasks':\n            this.navigate('Tasks');\n            break;\n          case '/medications':\n            this.navigate('Medications');\n            break;\n          case '/progress':\n            this.navigate('Progress');\n            break;\n          default:\n            console.log('Unknown deep link path:', path);\n        }\n        var eventId = urlObj.searchParams.get('eventId');\n        var taskId = urlObj.searchParams.get('taskId');\n        var medicationId = urlObj.searchParams.get('medicationId');\n        if (eventId) {\n          this.navigate('Timetable', {\n            eventId: eventId\n          });\n        } else if (taskId) {\n          this.navigate('Tasks', {\n            taskId: taskId\n          });\n        } else if (medicationId) {\n          this.navigate('Medications', {\n            medicationId: medicationId\n          });\n        }\n      } catch (error) {\n        console.error('Error handling deep link:', error);\n      }\n    }\n  }, {\n    key: \"navigateToEvent\",\n    value: function navigateToEvent(eventId) {\n      this.navigate('Timetable', {\n        eventId: eventId\n      });\n    }\n  }, {\n    key: \"navigateToTask\",\n    value: function navigateToTask(taskId) {\n      this.navigate('Tasks', {\n        taskId: taskId\n      });\n    }\n  }, {\n    key: \"navigateToMedication\",\n    value: function navigateToMedication(medicationId) {\n      this.navigate('Medications', {\n        medicationId: medicationId\n      });\n    }\n  }, {\n    key: \"getCurrentRouteName\",\n    value: function getCurrentRouteName() {\n      var _this$navigationRef4;\n      if ((_this$navigationRef4 = this.navigationRef) != null && _this$navigationRef4.current) {\n        var _this$navigationRef$c;\n        return (_this$navigationRef$c = this.navigationRef.current.getCurrentRoute()) == null ? void 0 : _this$navigationRef$c.name;\n      }\n      return undefined;\n    }\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      var _this$navigationRef5, _this$navigationRef5$;\n      return ((_this$navigationRef5 = this.navigationRef) == null ? void 0 : (_this$navigationRef5$ = _this$navigationRef5.current) == null ? void 0 : _this$navigationRef5$.isReady()) || false;\n    }\n  }, {\n    key: \"handleNotificationNavigation\",\n    value: function handleNotificationNavigation(notificationData) {\n      return (0, _navigationGuards.navigateFromNotificationWithGuard)(notificationData);\n    }\n  }]);\n}();\nvar navigationService = exports.navigationService = new NavigationService();\nvar _default = exports.default = NavigationService;","map":{"version":3,"names":["_navigationGuards","require","NavigationService","_classCallCheck2","default","navigationRef","_createClass2","key","value","setNavigationRef","ref","navigate","screenName","params","_this$navigationRef","current","goBack","_this$navigationRef2","reset","_this$navigationRef3","index","routes","name","handleDeepLink","url","guardResult","validateDeepLink","canNavigate","console","warn","message","urlObj","URL","path","pathname","log","eventId","searchParams","get","taskId","medicationId","error","navigateToEvent","navigateToTask","navigateToMedication","getCurrentRouteName","_this$navigationRef4","_this$navigationRef$c","getCurrentRoute","undefined","isReady","_this$navigationRef5","_this$navigationRef5$","handleNotificationNavigation","notificationData","navigateFromNotificationWithGuard","navigationService","exports","_default"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/services/NavigationService.ts"],"sourcesContent":["import { NavigationContainerRef } from '@react-navigation/native';\nimport { RootTabParamList } from '../../App';\nimport { validateDeepLink, navigateFromNotificationWithGuard } from '../utils/navigationGuards';\n\n/**\n * Navigation service for handling deep links and programmatic navigation\n */\nclass NavigationService {\n  private navigationRef: React.RefObject<NavigationContainerRef<RootTabParamList>> | null = null;\n\n  /**\n   * Set the navigation reference\n   */\n  setNavigationRef(ref: React.RefObject<NavigationContainerRef<RootTabParamList>>) {\n    this.navigationRef = ref;\n  }\n\n  /**\n   * Navigate to a specific screen\n   */\n  navigate(screenName: keyof RootTabParamList, params?: any) {\n    if (this.navigationRef?.current) {\n      this.navigationRef.current.navigate(screenName, params);\n    }\n  }\n\n  /**\n   * Go back to the previous screen\n   */\n  goBack() {\n    if (this.navigationRef?.current) {\n      this.navigationRef.current.goBack();\n    }\n  }\n\n  /**\n   * Reset navigation to a specific screen\n   */\n  reset(screenName: keyof RootTabParamList) {\n    if (this.navigationRef?.current) {\n      this.navigationRef.current.reset({\n        index: 0,\n        routes: [{ name: screenName }],\n      });\n    }\n  }\n\n  /**\n   * Handle deep links from notifications with validation\n   */\n  handleDeepLink(url: string) {\n    // Validate deep link before processing\n    const guardResult = validateDeepLink(url);\n    \n    if (!guardResult.canNavigate) {\n      console.warn('Deep link blocked:', guardResult.message);\n      return;\n    }\n\n    try {\n      const urlObj = new URL(url);\n      const path = urlObj.pathname;\n\n      switch (path) {\n        case '/timetable':\n          this.navigate('Timetable');\n          break;\n        case '/tasks':\n          this.navigate('Tasks');\n          break;\n        case '/medications':\n          this.navigate('Medications');\n          break;\n        case '/progress':\n          this.navigate('Progress');\n          break;\n        default:\n          console.log('Unknown deep link path:', path);\n      }\n\n      // Handle query parameters for specific items\n      const eventId = urlObj.searchParams.get('eventId');\n      const taskId = urlObj.searchParams.get('taskId');\n      const medicationId = urlObj.searchParams.get('medicationId');\n\n      if (eventId) {\n        this.navigate('Timetable', { eventId });\n      } else if (taskId) {\n        this.navigate('Tasks', { taskId });\n      } else if (medicationId) {\n        this.navigate('Medications', { medicationId });\n      }\n    } catch (error) {\n      console.error('Error handling deep link:', error);\n    }\n  }\n\n  /**\n   * Navigate to timetable with specific event\n   */\n  navigateToEvent(eventId: string) {\n    this.navigate('Timetable', { eventId });\n  }\n\n  /**\n   * Navigate to tasks with specific task\n   */\n  navigateToTask(taskId: string) {\n    this.navigate('Tasks', { taskId });\n  }\n\n  /**\n   * Navigate to medications with specific medication\n   */\n  navigateToMedication(medicationId: string) {\n    this.navigate('Medications', { medicationId });\n  }\n\n  /**\n   * Get current route name\n   */\n  getCurrentRouteName(): string | undefined {\n    if (this.navigationRef?.current) {\n      return this.navigationRef.current.getCurrentRoute()?.name;\n    }\n    return undefined;\n  }\n\n  /**\n   * Check if navigation is ready\n   */\n  isReady(): boolean {\n    return this.navigationRef?.current?.isReady() || false;\n  }\n\n  /**\n   * Handle navigation from notification with validation\n   */\n  handleNotificationNavigation(notificationData: any): boolean {\n    return navigateFromNotificationWithGuard(notificationData);\n  }\n}\n\n// Export singleton instance\nexport const navigationService = new NavigationService();\nexport default NavigationService;"],"mappings":";;;;;;;AAEA,IAAAA,iBAAA,GAAAC,OAAA;AAAgG,IAK1FC,iBAAiB;EAAA,SAAAA,kBAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,iBAAA;IAAA,KACbG,aAAa,GAAqE,IAAI;EAAA;EAAA,WAAAC,aAAA,CAAAF,OAAA,EAAAF,iBAAA;IAAAK,GAAA;IAAAC,KAAA,EAK9F,SAAAC,gBAAgBA,CAACC,GAA8D,EAAE;MAC/E,IAAI,CAACL,aAAa,GAAGK,GAAG;IAC1B;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAKD,SAAAG,QAAQA,CAACC,UAAkC,EAAEC,MAAY,EAAE;MAAA,IAAAC,mBAAA;MACzD,KAAAA,mBAAA,GAAI,IAAI,CAACT,aAAa,aAAlBS,mBAAA,CAAoBC,OAAO,EAAE;QAC/B,IAAI,CAACV,aAAa,CAACU,OAAO,CAACJ,QAAQ,CAACC,UAAU,EAAEC,MAAM,CAAC;MACzD;IACF;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAKD,SAAAQ,MAAMA,CAAA,EAAG;MAAA,IAAAC,oBAAA;MACP,KAAAA,oBAAA,GAAI,IAAI,CAACZ,aAAa,aAAlBY,oBAAA,CAAoBF,OAAO,EAAE;QAC/B,IAAI,CAACV,aAAa,CAACU,OAAO,CAACC,MAAM,CAAC,CAAC;MACrC;IACF;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAKD,SAAAU,KAAKA,CAACN,UAAkC,EAAE;MAAA,IAAAO,oBAAA;MACxC,KAAAA,oBAAA,GAAI,IAAI,CAACd,aAAa,aAAlBc,oBAAA,CAAoBJ,OAAO,EAAE;QAC/B,IAAI,CAACV,aAAa,CAACU,OAAO,CAACG,KAAK,CAAC;UAC/BE,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;YAAEC,IAAI,EAAEV;UAAW,CAAC;QAC/B,CAAC,CAAC;MACJ;IACF;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAKD,SAAAe,cAAcA,CAACC,GAAW,EAAE;MAE1B,IAAMC,WAAW,GAAG,IAAAC,kCAAgB,EAACF,GAAG,CAAC;MAEzC,IAAI,CAACC,WAAW,CAACE,WAAW,EAAE;QAC5BC,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAEJ,WAAW,CAACK,OAAO,CAAC;QACvD;MACF;MAEA,IAAI;QACF,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAACR,GAAG,CAAC;QAC3B,IAAMS,IAAI,GAAGF,MAAM,CAACG,QAAQ;QAE5B,QAAQD,IAAI;UACV,KAAK,YAAY;YACf,IAAI,CAACtB,QAAQ,CAAC,WAAW,CAAC;YAC1B;UACF,KAAK,QAAQ;YACX,IAAI,CAACA,QAAQ,CAAC,OAAO,CAAC;YACtB;UACF,KAAK,cAAc;YACjB,IAAI,CAACA,QAAQ,CAAC,aAAa,CAAC;YAC5B;UACF,KAAK,WAAW;YACd,IAAI,CAACA,QAAQ,CAAC,UAAU,CAAC;YACzB;UACF;YACEiB,OAAO,CAACO,GAAG,CAAC,yBAAyB,EAAEF,IAAI,CAAC;QAChD;QAGA,IAAMG,OAAO,GAAGL,MAAM,CAACM,YAAY,CAACC,GAAG,CAAC,SAAS,CAAC;QAClD,IAAMC,MAAM,GAAGR,MAAM,CAACM,YAAY,CAACC,GAAG,CAAC,QAAQ,CAAC;QAChD,IAAME,YAAY,GAAGT,MAAM,CAACM,YAAY,CAACC,GAAG,CAAC,cAAc,CAAC;QAE5D,IAAIF,OAAO,EAAE;UACX,IAAI,CAACzB,QAAQ,CAAC,WAAW,EAAE;YAAEyB,OAAO,EAAPA;UAAQ,CAAC,CAAC;QACzC,CAAC,MAAM,IAAIG,MAAM,EAAE;UACjB,IAAI,CAAC5B,QAAQ,CAAC,OAAO,EAAE;YAAE4B,MAAM,EAANA;UAAO,CAAC,CAAC;QACpC,CAAC,MAAM,IAAIC,YAAY,EAAE;UACvB,IAAI,CAAC7B,QAAQ,CAAC,aAAa,EAAE;YAAE6B,YAAY,EAAZA;UAAa,CAAC,CAAC;QAChD;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdb,OAAO,CAACa,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;EAAC;IAAAlC,GAAA;IAAAC,KAAA,EAKD,SAAAkC,eAAeA,CAACN,OAAe,EAAE;MAC/B,IAAI,CAACzB,QAAQ,CAAC,WAAW,EAAE;QAAEyB,OAAO,EAAPA;MAAQ,CAAC,CAAC;IACzC;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EAKD,SAAAmC,cAAcA,CAACJ,MAAc,EAAE;MAC7B,IAAI,CAAC5B,QAAQ,CAAC,OAAO,EAAE;QAAE4B,MAAM,EAANA;MAAO,CAAC,CAAC;IACpC;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EAKD,SAAAoC,oBAAoBA,CAACJ,YAAoB,EAAE;MACzC,IAAI,CAAC7B,QAAQ,CAAC,aAAa,EAAE;QAAE6B,YAAY,EAAZA;MAAa,CAAC,CAAC;IAChD;EAAC;IAAAjC,GAAA;IAAAC,KAAA,EAKD,SAAAqC,mBAAmBA,CAAA,EAAuB;MAAA,IAAAC,oBAAA;MACxC,KAAAA,oBAAA,GAAI,IAAI,CAACzC,aAAa,aAAlByC,oBAAA,CAAoB/B,OAAO,EAAE;QAAA,IAAAgC,qBAAA;QAC/B,QAAAA,qBAAA,GAAO,IAAI,CAAC1C,aAAa,CAACU,OAAO,CAACiC,eAAe,CAAC,CAAC,qBAA5CD,qBAAA,CAA8CzB,IAAI;MAC3D;MACA,OAAO2B,SAAS;IAClB;EAAC;IAAA1C,GAAA;IAAAC,KAAA,EAKD,SAAA0C,OAAOA,CAAA,EAAY;MAAA,IAAAC,oBAAA,EAAAC,qBAAA;MACjB,OAAO,EAAAD,oBAAA,OAAI,CAAC9C,aAAa,sBAAA+C,qBAAA,GAAlBD,oBAAA,CAAoBpC,OAAO,qBAA3BqC,qBAAA,CAA6BF,OAAO,CAAC,CAAC,KAAI,KAAK;IACxD;EAAC;IAAA3C,GAAA;IAAAC,KAAA,EAKD,SAAA6C,4BAA4BA,CAACC,gBAAqB,EAAW;MAC3D,OAAO,IAAAC,mDAAiC,EAACD,gBAAgB,CAAC;IAC5D;EAAC;AAAA;AAII,IAAME,iBAAiB,GAAAC,OAAA,CAAAD,iBAAA,GAAG,IAAItD,iBAAiB,CAAC,CAAC;AAAC,IAAAwD,QAAA,GAAAD,OAAA,CAAArD,OAAA,GAC1CF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}