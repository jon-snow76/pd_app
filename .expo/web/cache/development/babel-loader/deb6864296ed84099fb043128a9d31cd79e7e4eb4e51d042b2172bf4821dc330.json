{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProductivityInsights = exports.generateProductivityLog = exports.generateChartData = exports.calculateWeeklyStats = exports.calculateProductivityStreaks = exports.calculateMonthlyStats = exports.calculateMedicationAdherenceScore = exports.calculateDailyProductivityScore = exports.calculateCategoryStats = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _helpers = require(\"./helpers\");\nvar calculateDailyProductivityScore = exports.calculateDailyProductivityScore = function calculateDailyProductivityScore(tasks, events, medications) {\n  var date = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Date();\n  var dateKey = (0, _helpers.formatDateString)(date);\n  var dayTasks = tasks.filter(function (task) {\n    return (0, _helpers.formatDateString)(task.dueDate) === dateKey;\n  });\n  var completedTasks = dayTasks.filter(function (task) {\n    return task.isCompleted;\n  }).length;\n  var taskScore = dayTasks.length > 0 ? completedTasks / dayTasks.length * 40 : 0;\n  var dayEvents = events.filter(function (event) {\n    return (0, _helpers.formatDateString)(event.startTime) === dateKey;\n  });\n  var eventScore = dayEvents.length > 0 ? 40 : 0;\n  var medicationScore = calculateMedicationAdherenceScore(medications, date) * 20;\n  return Math.round(taskScore + eventScore + medicationScore);\n};\nvar calculateMedicationAdherenceScore = exports.calculateMedicationAdherenceScore = function calculateMedicationAdherenceScore(medications) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var dateKey = (0, _helpers.formatDateString)(date);\n  var activeMedications = medications.filter(function (med) {\n    return med.isActive;\n  });\n  if (activeMedications.length === 0) {\n    return 1;\n  }\n  var totalExpected = 0;\n  var totalTaken = 0;\n  activeMedications.forEach(function (medication) {\n    var dayLogs = medication.adherenceLog.filter(function (log) {\n      return log.date === dateKey;\n    });\n    totalExpected += medication.reminderTimes.length;\n    totalTaken += dayLogs.filter(function (log) {\n      return log.taken;\n    }).length;\n  });\n  return totalExpected > 0 ? totalTaken / totalExpected : 1;\n};\nvar generateProductivityLog = exports.generateProductivityLog = function generateProductivityLog(tasks, events, medications) {\n  var date = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Date();\n  var dateKey = (0, _helpers.formatDateString)(date);\n  var dayTasks = tasks.filter(function (task) {\n    return (0, _helpers.formatDateString)(task.dueDate) === dateKey;\n  });\n  var completedTasks = dayTasks.filter(function (task) {\n    return task.isCompleted;\n  }).length;\n  var dayEvents = events.filter(function (event) {\n    return (0, _helpers.formatDateString)(event.startTime) === dateKey;\n  });\n  var completedEvents = dayEvents.length;\n  var medicationAdherence = calculateMedicationAdherenceScore(medications, date);\n  var productivityScore = calculateDailyProductivityScore(tasks, events, medications, date);\n  return {\n    date: dateKey,\n    completedTasks: completedTasks,\n    totalTasks: dayTasks.length,\n    completedEvents: completedEvents,\n    totalEvents: dayEvents.length,\n    medicationAdherence: medicationAdherence,\n    productivityScore: productivityScore\n  };\n};\nvar calculateWeeklyStats = exports.calculateWeeklyStats = function calculateWeeklyStats(productivityLogs) {\n  var startDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var weekLogs = [];\n  var _loop = function _loop() {\n    var date = new Date(startDate);\n    date.setDate(date.getDate() - i);\n    var dateKey = (0, _helpers.formatDateString)(date);\n    var log = productivityLogs.find(function (l) {\n      return l.date === dateKey;\n    });\n    if (log) {\n      weekLogs.push(log);\n    } else {\n      weekLogs.push({\n        date: dateKey,\n        completedTasks: 0,\n        totalTasks: 0,\n        completedEvents: 0,\n        totalEvents: 0,\n        medicationAdherence: 1,\n        productivityScore: 0\n      });\n    }\n  };\n  for (var i = 6; i >= 0; i--) {\n    _loop();\n  }\n  var totalTasks = weekLogs.reduce(function (sum, log) {\n    return sum + log.totalTasks;\n  }, 0);\n  var completedTasks = weekLogs.reduce(function (sum, log) {\n    return sum + log.completedTasks;\n  }, 0);\n  var totalEvents = weekLogs.reduce(function (sum, log) {\n    return sum + log.totalEvents;\n  }, 0);\n  var completedEvents = weekLogs.reduce(function (sum, log) {\n    return sum + log.completedEvents;\n  }, 0);\n  var averageScore = weekLogs.reduce(function (sum, log) {\n    return sum + log.productivityScore;\n  }, 0) / 7;\n  var averageMedicationAdherence = weekLogs.reduce(function (sum, log) {\n    return sum + log.medicationAdherence;\n  }, 0) / 7;\n  var dailyScores = weekLogs.map(function (log) {\n    return log.productivityScore;\n  });\n  var firstHalf = dailyScores.slice(0, 3).reduce(function (sum, score) {\n    return sum + score;\n  }, 0) / 3;\n  var secondHalf = dailyScores.slice(4, 7).reduce(function (sum, score) {\n    return sum + score;\n  }, 0) / 3;\n  var difference = secondHalf - firstHalf;\n  var trend;\n  if (difference > 5) {\n    trend = 'improving';\n  } else if (difference < -5) {\n    trend = 'declining';\n  } else {\n    trend = 'stable';\n  }\n  return {\n    averageScore: Math.round(averageScore),\n    totalTasks: totalTasks,\n    completedTasks: completedTasks,\n    totalEvents: totalEvents,\n    completedEvents: completedEvents,\n    averageMedicationAdherence: Math.round(averageMedicationAdherence * 100) / 100,\n    dailyScores: dailyScores,\n    trend: trend\n  };\n};\nvar calculateMonthlyStats = exports.calculateMonthlyStats = function calculateMonthlyStats(productivityLogs, month, year) {\n  var monthLogs = productivityLogs.filter(function (log) {\n    var logDate = new Date(log.date);\n    return logDate.getMonth() === month && logDate.getFullYear() === year;\n  });\n  if (monthLogs.length === 0) {\n    return {\n      averageScore: 0,\n      totalTasks: 0,\n      completedTasks: 0,\n      totalEvents: 0,\n      completedEvents: 0,\n      averageMedicationAdherence: 0,\n      bestDay: null,\n      worstDay: null,\n      streaks: {\n        currentStreak: 0,\n        longestStreak: 0\n      }\n    };\n  }\n  var totalTasks = monthLogs.reduce(function (sum, log) {\n    return sum + log.totalTasks;\n  }, 0);\n  var completedTasks = monthLogs.reduce(function (sum, log) {\n    return sum + log.completedTasks;\n  }, 0);\n  var totalEvents = monthLogs.reduce(function (sum, log) {\n    return sum + log.totalEvents;\n  }, 0);\n  var completedEvents = monthLogs.reduce(function (sum, log) {\n    return sum + log.completedEvents;\n  }, 0);\n  var averageScore = monthLogs.reduce(function (sum, log) {\n    return sum + log.productivityScore;\n  }, 0) / monthLogs.length;\n  var averageMedicationAdherence = monthLogs.reduce(function (sum, log) {\n    return sum + log.medicationAdherence;\n  }, 0) / monthLogs.length;\n  var sortedLogs = (0, _toConsumableArray2.default)(monthLogs).sort(function (a, b) {\n    return b.productivityScore - a.productivityScore;\n  });\n  var bestDay = sortedLogs.length > 0 ? {\n    date: sortedLogs[0].date,\n    score: sortedLogs[0].productivityScore\n  } : null;\n  var worstDay = sortedLogs.length > 0 ? {\n    date: sortedLogs[sortedLogs.length - 1].date,\n    score: sortedLogs[sortedLogs.length - 1].productivityScore\n  } : null;\n  var streaks = calculateProductivityStreaks(monthLogs);\n  return {\n    averageScore: Math.round(averageScore),\n    totalTasks: totalTasks,\n    completedTasks: completedTasks,\n    totalEvents: totalEvents,\n    completedEvents: completedEvents,\n    averageMedicationAdherence: Math.round(averageMedicationAdherence * 100) / 100,\n    bestDay: bestDay,\n    worstDay: worstDay,\n    streaks: streaks\n  };\n};\nvar calculateProductivityStreaks = exports.calculateProductivityStreaks = function calculateProductivityStreaks(productivityLogs) {\n  var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 70;\n  if (productivityLogs.length === 0) {\n    return {\n      currentStreak: 0,\n      longestStreak: 0\n    };\n  }\n  var sortedLogs = (0, _toConsumableArray2.default)(productivityLogs).sort(function (a, b) {\n    return new Date(a.date).getTime() - new Date(b.date).getTime();\n  });\n  var currentStreak = 0;\n  var longestStreak = 0;\n  var tempStreak = 0;\n  var today = new Date();\n  var checkDate = new Date(today);\n  var _loop2 = function _loop2() {\n    var dateKey = (0, _helpers.formatDateString)(checkDate);\n    var log = sortedLogs.find(function (l) {\n      return l.date === dateKey;\n    });\n    if (log && log.productivityScore >= threshold) {\n      if (i === 0 || currentStreak > 0) {\n        currentStreak++;\n      }\n    } else {\n      return 1;\n    }\n    checkDate.setDate(checkDate.getDate() - 1);\n  };\n  for (var i = 0; i < 30; i++) {\n    if (_loop2()) break;\n  }\n  for (var log of sortedLogs) {\n    if (log.productivityScore >= threshold) {\n      tempStreak++;\n      longestStreak = Math.max(longestStreak, tempStreak);\n    } else {\n      tempStreak = 0;\n    }\n  }\n  return {\n    currentStreak: currentStreak,\n    longestStreak: longestStreak\n  };\n};\nvar getProductivityInsights = exports.getProductivityInsights = function getProductivityInsights(tasks, events, medications, productivityLogs) {\n  var insights = [];\n  var recommendations = [];\n  var achievements = [];\n  var weeklyStats = calculateWeeklyStats(productivityLogs);\n  var streaks = calculateProductivityStreaks(productivityLogs);\n  if (weeklyStats.trend === 'improving') {\n    insights.push('Your productivity has been improving this week! 📈');\n  } else if (weeklyStats.trend === 'declining') {\n    insights.push('Your productivity has declined this week. Let\\'s get back on track! 📉');\n  }\n  if (weeklyStats.averageScore >= 80) {\n    insights.push('You\\'re maintaining excellent productivity levels! 🌟');\n  } else if (weeklyStats.averageScore >= 60) {\n    insights.push('You\\'re doing well with good productivity levels. 👍');\n  } else {\n    insights.push('There\\'s room for improvement in your productivity. 💪');\n  }\n  var overdueTasks = tasks.filter(function (task) {\n    return !task.isCompleted && (0, _helpers.isPastDate)(task.dueDate);\n  });\n  if (overdueTasks.length > 0) {\n    insights.push(`You have ${overdueTasks.length} overdue task${overdueTasks.length > 1 ? 's' : ''}. 🚨`);\n  }\n  var todayTasks = tasks.filter(function (task) {\n    return (0, _helpers.isToday)(task.dueDate);\n  });\n  var completedTodayTasks = todayTasks.filter(function (task) {\n    return task.isCompleted;\n  });\n  if (todayTasks.length > 0) {\n    var completionRate = completedTodayTasks.length / todayTasks.length * 100;\n    insights.push(`Today's task completion: ${Math.round(completionRate)}% (${completedTodayTasks.length}/${todayTasks.length})`);\n  }\n  if (weeklyStats.completedTasks / Math.max(weeklyStats.totalTasks, 1) < 0.7) {\n    recommendations.push('Try breaking large tasks into smaller, manageable chunks');\n    recommendations.push('Set realistic daily task goals to improve completion rates');\n  }\n  if (weeklyStats.averageMedicationAdherence < 0.8) {\n    recommendations.push('Consider setting additional medication reminders');\n    recommendations.push('Use the medication tracking features more consistently');\n  }\n  if (overdueTasks.length > 3) {\n    recommendations.push('Focus on completing overdue tasks before adding new ones');\n    recommendations.push('Review your task priorities and deadlines');\n  }\n  var highPriorityTasks = tasks.filter(function (task) {\n    return task.priority === 'high' && !task.isCompleted;\n  });\n  if (highPriorityTasks.length > 5) {\n    recommendations.push('You have many high-priority tasks. Consider re-evaluating priorities');\n  }\n  if (streaks.currentStreak >= 7) {\n    achievements.push(`🔥 ${streaks.currentStreak}-day productivity streak!`);\n  }\n  if (streaks.longestStreak >= 14) {\n    achievements.push(`🏆 Longest streak: ${streaks.longestStreak} days!`);\n  }\n  if (weeklyStats.averageScore >= 90) {\n    achievements.push('🌟 Productivity Master - 90%+ average this week!');\n  }\n  if (weeklyStats.completedTasks >= 20) {\n    achievements.push(`✅ Task Crusher - ${weeklyStats.completedTasks} tasks completed this week!`);\n  }\n  if (weeklyStats.averageMedicationAdherence >= 0.95) {\n    achievements.push('💊 Perfect Adherence - 95%+ medication compliance!');\n  }\n  return {\n    insights: insights,\n    recommendations: recommendations,\n    achievements: achievements\n  };\n};\nvar generateChartData = exports.generateChartData = function generateChartData(productivityLogs) {\n  var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'week';\n  var days = period === 'week' ? 7 : 30;\n  var labels = [];\n  var scores = [];\n  var tasks = [];\n  var events = [];\n  var medications = [];\n  var _loop3 = function _loop3() {\n    var date = new Date();\n    date.setDate(date.getDate() - i);\n    var dateKey = (0, _helpers.formatDateString)(date);\n    var log = productivityLogs.find(function (l) {\n      return l.date === dateKey;\n    });\n    labels.push(period === 'week' ? date.toLocaleDateString('en-US', {\n      weekday: 'short'\n    }) : date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    }));\n    scores.push((log == null ? void 0 : log.productivityScore) || 0);\n    tasks.push(log ? Math.round(log.completedTasks / Math.max(log.totalTasks, 1) * 100) : 0);\n    events.push(log ? Math.round(log.completedEvents / Math.max(log.totalEvents, 1) * 100) : 0);\n    medications.push(log ? Math.round(log.medicationAdherence * 100) : 100);\n  };\n  for (var i = days - 1; i >= 0; i--) {\n    _loop3();\n  }\n  return {\n    labels: labels,\n    scores: scores,\n    tasks: tasks,\n    events: events,\n    medications: medications\n  };\n};\nvar calculateCategoryStats = exports.calculateCategoryStats = function calculateCategoryStats(tasks) {\n  var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'week';\n  var days = period === 'week' ? 7 : 30;\n  var cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  var periodTasks = tasks.filter(function (task) {\n    return task.dueDate >= cutoffDate;\n  });\n  var categoryStats = {};\n  periodTasks.forEach(function (task) {\n    if (!categoryStats[task.category]) {\n      categoryStats[task.category] = {\n        completed: 0,\n        total: 0,\n        percentage: 0\n      };\n    }\n    categoryStats[task.category].total++;\n    if (task.isCompleted) {\n      categoryStats[task.category].completed++;\n    }\n  });\n  Object.keys(categoryStats).forEach(function (category) {\n    var stats = categoryStats[category];\n    stats.percentage = stats.total > 0 ? Math.round(stats.completed / stats.total * 100) : 0;\n  });\n  return categoryStats;\n};","map":{"version":3,"names":["_helpers","require","calculateDailyProductivityScore","exports","tasks","events","medications","date","arguments","length","undefined","Date","dateKey","formatDateString","dayTasks","filter","task","dueDate","completedTasks","isCompleted","taskScore","dayEvents","event","startTime","eventScore","medicationScore","calculateMedicationAdherenceScore","Math","round","activeMedications","med","isActive","totalExpected","totalTaken","forEach","medication","dayLogs","adherenceLog","log","reminderTimes","taken","generateProductivityLog","completedEvents","medicationAdherence","productivityScore","totalTasks","totalEvents","calculateWeeklyStats","productivityLogs","startDate","weekLogs","_loop","setDate","getDate","i","find","l","push","reduce","sum","averageScore","averageMedicationAdherence","dailyScores","map","firstHalf","slice","score","secondHalf","difference","trend","calculateMonthlyStats","month","year","monthLogs","logDate","getMonth","getFullYear","bestDay","worstDay","streaks","currentStreak","longestStreak","sortedLogs","_toConsumableArray2","default","sort","a","b","calculateProductivityStreaks","threshold","getTime","tempStreak","today","checkDate","_loop2","max","getProductivityInsights","insights","recommendations","achievements","weeklyStats","overdueTasks","isPastDate","todayTasks","isToday","completedTodayTasks","completionRate","highPriorityTasks","priority","generateChartData","period","days","labels","scores","_loop3","toLocaleDateString","weekday","day","calculateCategoryStats","cutoffDate","periodTasks","categoryStats","category","completed","total","percentage","Object","keys","stats"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/utils/progressUtils.ts"],"sourcesContent":["import { Task, TimetableEvent, Medication, ProductivityLog } from '../types';\nimport { formatDateString, isToday, isPastDate } from './helpers';\n\n/**\n * Progress tracking and analytics utilities\n */\n\n/**\n * Calculate daily productivity score based on completed tasks, events, and medication adherence\n */\nexport const calculateDailyProductivityScore = (\n  tasks: Task[],\n  events: TimetableEvent[],\n  medications: Medication[],\n  date: Date = new Date()\n): number => {\n  const dateKey = formatDateString(date);\n  \n  // Task completion score (40% weight)\n  const dayTasks = tasks.filter(task => formatDateString(task.dueDate) === dateKey);\n  const completedTasks = dayTasks.filter(task => task.isCompleted).length;\n  const taskScore = dayTasks.length > 0 ? (completedTasks / dayTasks.length) * 40 : 0;\n  \n  // Event attendance score (40% weight)\n  const dayEvents = events.filter(event => formatDateString(event.startTime) === dateKey);\n  // For now, assume all events are attended (in a real app, you'd track attendance)\n  const eventScore = dayEvents.length > 0 ? 40 : 0;\n  \n  // Medication adherence score (20% weight)\n  const medicationScore = calculateMedicationAdherenceScore(medications, date) * 20;\n  \n  return Math.round(taskScore + eventScore + medicationScore);\n};\n\n/**\n * Calculate medication adherence score for a specific date\n */\nexport const calculateMedicationAdherenceScore = (\n  medications: Medication[],\n  date: Date = new Date()\n): number => {\n  const dateKey = formatDateString(date);\n  const activeMedications = medications.filter(med => med.isActive);\n  \n  if (activeMedications.length === 0) {\n    return 1; // Perfect score if no medications\n  }\n  \n  let totalExpected = 0;\n  let totalTaken = 0;\n  \n  activeMedications.forEach(medication => {\n    const dayLogs = medication.adherenceLog.filter(log => log.date === dateKey);\n    totalExpected += medication.reminderTimes.length;\n    totalTaken += dayLogs.filter(log => log.taken).length;\n  });\n  \n  return totalExpected > 0 ? totalTaken / totalExpected : 1;\n};\n\n/**\n * Generate productivity log for a specific date\n */\nexport const generateProductivityLog = (\n  tasks: Task[],\n  events: TimetableEvent[],\n  medications: Medication[],\n  date: Date = new Date()\n): ProductivityLog => {\n  const dateKey = formatDateString(date);\n  \n  // Task statistics\n  const dayTasks = tasks.filter(task => formatDateString(task.dueDate) === dateKey);\n  const completedTasks = dayTasks.filter(task => task.isCompleted).length;\n  \n  // Event statistics\n  const dayEvents = events.filter(event => formatDateString(event.startTime) === dateKey);\n  const completedEvents = dayEvents.length; // Assume all events are attended\n  \n  // Medication adherence\n  const medicationAdherence = calculateMedicationAdherenceScore(medications, date);\n  \n  // Overall productivity score\n  const productivityScore = calculateDailyProductivityScore(tasks, events, medications, date);\n  \n  return {\n    date: dateKey,\n    completedTasks,\n    totalTasks: dayTasks.length,\n    completedEvents,\n    totalEvents: dayEvents.length,\n    medicationAdherence,\n    productivityScore,\n  };\n};\n\n/**\n * Calculate weekly productivity statistics\n */\nexport const calculateWeeklyStats = (\n  productivityLogs: ProductivityLog[],\n  startDate: Date = new Date()\n): {\n  averageScore: number;\n  totalTasks: number;\n  completedTasks: number;\n  totalEvents: number;\n  completedEvents: number;\n  averageMedicationAdherence: number;\n  dailyScores: number[];\n  trend: 'improving' | 'declining' | 'stable';\n} => {\n  // Get last 7 days\n  const weekLogs: ProductivityLog[] = [];\n  for (let i = 6; i >= 0; i--) {\n    const date = new Date(startDate);\n    date.setDate(date.getDate() - i);\n    const dateKey = formatDateString(date);\n    \n    const log = productivityLogs.find(l => l.date === dateKey);\n    if (log) {\n      weekLogs.push(log);\n    } else {\n      // Create empty log for missing days\n      weekLogs.push({\n        date: dateKey,\n        completedTasks: 0,\n        totalTasks: 0,\n        completedEvents: 0,\n        totalEvents: 0,\n        medicationAdherence: 1,\n        productivityScore: 0,\n      });\n    }\n  }\n  \n  // Calculate aggregated statistics\n  const totalTasks = weekLogs.reduce((sum, log) => sum + log.totalTasks, 0);\n  const completedTasks = weekLogs.reduce((sum, log) => sum + log.completedTasks, 0);\n  const totalEvents = weekLogs.reduce((sum, log) => sum + log.totalEvents, 0);\n  const completedEvents = weekLogs.reduce((sum, log) => sum + log.completedEvents, 0);\n  \n  const averageScore = weekLogs.reduce((sum, log) => sum + log.productivityScore, 0) / 7;\n  const averageMedicationAdherence = weekLogs.reduce((sum, log) => sum + log.medicationAdherence, 0) / 7;\n  \n  const dailyScores = weekLogs.map(log => log.productivityScore);\n  \n  // Calculate trend\n  const firstHalf = dailyScores.slice(0, 3).reduce((sum, score) => sum + score, 0) / 3;\n  const secondHalf = dailyScores.slice(4, 7).reduce((sum, score) => sum + score, 0) / 3;\n  const difference = secondHalf - firstHalf;\n  \n  let trend: 'improving' | 'declining' | 'stable';\n  if (difference > 5) {\n    trend = 'improving';\n  } else if (difference < -5) {\n    trend = 'declining';\n  } else {\n    trend = 'stable';\n  }\n  \n  return {\n    averageScore: Math.round(averageScore),\n    totalTasks,\n    completedTasks,\n    totalEvents,\n    completedEvents,\n    averageMedicationAdherence: Math.round(averageMedicationAdherence * 100) / 100,\n    dailyScores,\n    trend,\n  };\n};\n\n/**\n * Calculate monthly productivity statistics\n */\nexport const calculateMonthlyStats = (\n  productivityLogs: ProductivityLog[],\n  month: number,\n  year: number\n): {\n  averageScore: number;\n  totalTasks: number;\n  completedTasks: number;\n  totalEvents: number;\n  completedEvents: number;\n  averageMedicationAdherence: number;\n  bestDay: { date: string; score: number } | null;\n  worstDay: { date: string; score: number } | null;\n  streaks: {\n    currentStreak: number;\n    longestStreak: number;\n  };\n} => {\n  // Filter logs for the specified month\n  const monthLogs = productivityLogs.filter(log => {\n    const logDate = new Date(log.date);\n    return logDate.getMonth() === month && logDate.getFullYear() === year;\n  });\n  \n  if (monthLogs.length === 0) {\n    return {\n      averageScore: 0,\n      totalTasks: 0,\n      completedTasks: 0,\n      totalEvents: 0,\n      completedEvents: 0,\n      averageMedicationAdherence: 0,\n      bestDay: null,\n      worstDay: null,\n      streaks: { currentStreak: 0, longestStreak: 0 },\n    };\n  }\n  \n  // Calculate aggregated statistics\n  const totalTasks = monthLogs.reduce((sum, log) => sum + log.totalTasks, 0);\n  const completedTasks = monthLogs.reduce((sum, log) => sum + log.completedTasks, 0);\n  const totalEvents = monthLogs.reduce((sum, log) => sum + log.totalEvents, 0);\n  const completedEvents = monthLogs.reduce((sum, log) => sum + log.completedEvents, 0);\n  \n  const averageScore = monthLogs.reduce((sum, log) => sum + log.productivityScore, 0) / monthLogs.length;\n  const averageMedicationAdherence = monthLogs.reduce((sum, log) => sum + log.medicationAdherence, 0) / monthLogs.length;\n  \n  // Find best and worst days\n  const sortedLogs = [...monthLogs].sort((a, b) => b.productivityScore - a.productivityScore);\n  const bestDay = sortedLogs.length > 0 ? { date: sortedLogs[0].date, score: sortedLogs[0].productivityScore } : null;\n  const worstDay = sortedLogs.length > 0 ? { date: sortedLogs[sortedLogs.length - 1].date, score: sortedLogs[sortedLogs.length - 1].productivityScore } : null;\n  \n  // Calculate streaks (days with score >= 70)\n  const streaks = calculateProductivityStreaks(monthLogs);\n  \n  return {\n    averageScore: Math.round(averageScore),\n    totalTasks,\n    completedTasks,\n    totalEvents,\n    completedEvents,\n    averageMedicationAdherence: Math.round(averageMedicationAdherence * 100) / 100,\n    bestDay,\n    worstDay,\n    streaks,\n  };\n};\n\n/**\n * Calculate productivity streaks\n */\nexport const calculateProductivityStreaks = (\n  productivityLogs: ProductivityLog[],\n  threshold: number = 70\n): {\n  currentStreak: number;\n  longestStreak: number;\n} => {\n  if (productivityLogs.length === 0) {\n    return { currentStreak: 0, longestStreak: 0 };\n  }\n  \n  // Sort logs by date\n  const sortedLogs = [...productivityLogs].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  \n  let currentStreak = 0;\n  let longestStreak = 0;\n  let tempStreak = 0;\n  \n  // Calculate current streak (from most recent date backwards)\n  const today = new Date();\n  let checkDate = new Date(today);\n  \n  for (let i = 0; i < 30; i++) { // Check last 30 days\n    const dateKey = formatDateString(checkDate);\n    const log = sortedLogs.find(l => l.date === dateKey);\n    \n    if (log && log.productivityScore >= threshold) {\n      if (i === 0 || currentStreak > 0) { // Continue streak only if it's today or streak is ongoing\n        currentStreak++;\n      }\n    } else {\n      break; // Break current streak\n    }\n    \n    checkDate.setDate(checkDate.getDate() - 1);\n  }\n  \n  // Calculate longest streak\n  for (const log of sortedLogs) {\n    if (log.productivityScore >= threshold) {\n      tempStreak++;\n      longestStreak = Math.max(longestStreak, tempStreak);\n    } else {\n      tempStreak = 0;\n    }\n  }\n  \n  return { currentStreak, longestStreak };\n};\n\n/**\n * Get productivity insights and recommendations\n */\nexport const getProductivityInsights = (\n  tasks: Task[],\n  events: TimetableEvent[],\n  medications: Medication[],\n  productivityLogs: ProductivityLog[]\n): {\n  insights: string[];\n  recommendations: string[];\n  achievements: string[];\n} => {\n  const insights: string[] = [];\n  const recommendations: string[] = [];\n  const achievements: string[] = [];\n  \n  const weeklyStats = calculateWeeklyStats(productivityLogs);\n  const streaks = calculateProductivityStreaks(productivityLogs);\n  \n  // Insights\n  if (weeklyStats.trend === 'improving') {\n    insights.push('Your productivity has been improving this week! 📈');\n  } else if (weeklyStats.trend === 'declining') {\n    insights.push('Your productivity has declined this week. Let\\'s get back on track! 📉');\n  }\n  \n  if (weeklyStats.averageScore >= 80) {\n    insights.push('You\\'re maintaining excellent productivity levels! 🌟');\n  } else if (weeklyStats.averageScore >= 60) {\n    insights.push('You\\'re doing well with good productivity levels. 👍');\n  } else {\n    insights.push('There\\'s room for improvement in your productivity. 💪');\n  }\n  \n  // Task-specific insights\n  const overdueTasks = tasks.filter(task => !task.isCompleted && isPastDate(task.dueDate));\n  if (overdueTasks.length > 0) {\n    insights.push(`You have ${overdueTasks.length} overdue task${overdueTasks.length > 1 ? 's' : ''}. 🚨`);\n  }\n  \n  const todayTasks = tasks.filter(task => isToday(task.dueDate));\n  const completedTodayTasks = todayTasks.filter(task => task.isCompleted);\n  if (todayTasks.length > 0) {\n    const completionRate = (completedTodayTasks.length / todayTasks.length) * 100;\n    insights.push(`Today's task completion: ${Math.round(completionRate)}% (${completedTodayTasks.length}/${todayTasks.length})`);\n  }\n  \n  // Recommendations\n  if (weeklyStats.completedTasks / Math.max(weeklyStats.totalTasks, 1) < 0.7) {\n    recommendations.push('Try breaking large tasks into smaller, manageable chunks');\n    recommendations.push('Set realistic daily task goals to improve completion rates');\n  }\n  \n  if (weeklyStats.averageMedicationAdherence < 0.8) {\n    recommendations.push('Consider setting additional medication reminders');\n    recommendations.push('Use the medication tracking features more consistently');\n  }\n  \n  if (overdueTasks.length > 3) {\n    recommendations.push('Focus on completing overdue tasks before adding new ones');\n    recommendations.push('Review your task priorities and deadlines');\n  }\n  \n  const highPriorityTasks = tasks.filter(task => task.priority === 'high' && !task.isCompleted);\n  if (highPriorityTasks.length > 5) {\n    recommendations.push('You have many high-priority tasks. Consider re-evaluating priorities');\n  }\n  \n  // Achievements\n  if (streaks.currentStreak >= 7) {\n    achievements.push(`🔥 ${streaks.currentStreak}-day productivity streak!`);\n  }\n  \n  if (streaks.longestStreak >= 14) {\n    achievements.push(`🏆 Longest streak: ${streaks.longestStreak} days!`);\n  }\n  \n  if (weeklyStats.averageScore >= 90) {\n    achievements.push('🌟 Productivity Master - 90%+ average this week!');\n  }\n  \n  if (weeklyStats.completedTasks >= 20) {\n    achievements.push(`✅ Task Crusher - ${weeklyStats.completedTasks} tasks completed this week!`);\n  }\n  \n  if (weeklyStats.averageMedicationAdherence >= 0.95) {\n    achievements.push('💊 Perfect Adherence - 95%+ medication compliance!');\n  }\n  \n  return { insights, recommendations, achievements };\n};\n\n/**\n * Generate chart data for productivity visualization\n */\nexport const generateChartData = (\n  productivityLogs: ProductivityLog[],\n  period: 'week' | 'month' = 'week'\n): {\n  labels: string[];\n  scores: number[];\n  tasks: number[];\n  events: number[];\n  medications: number[];\n} => {\n  const days = period === 'week' ? 7 : 30;\n  const labels: string[] = [];\n  const scores: number[] = [];\n  const tasks: number[] = [];\n  const events: number[] = [];\n  const medications: number[] = [];\n  \n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    const dateKey = formatDateString(date);\n    \n    const log = productivityLogs.find(l => l.date === dateKey);\n    \n    labels.push(period === 'week' ? \n      date.toLocaleDateString('en-US', { weekday: 'short' }) :\n      date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n    );\n    \n    scores.push(log?.productivityScore || 0);\n    tasks.push(log ? Math.round((log.completedTasks / Math.max(log.totalTasks, 1)) * 100) : 0);\n    events.push(log ? Math.round((log.completedEvents / Math.max(log.totalEvents, 1)) * 100) : 0);\n    medications.push(log ? Math.round(log.medicationAdherence * 100) : 100);\n  }\n  \n  return { labels, scores, tasks, events, medications };\n};\n\n/**\n * Calculate category-wise task completion rates\n */\nexport const calculateCategoryStats = (\n  tasks: Task[],\n  period: 'week' | 'month' = 'week'\n): Record<string, { completed: number; total: number; percentage: number }> => {\n  const days = period === 'week' ? 7 : 30;\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  \n  const periodTasks = tasks.filter(task => task.dueDate >= cutoffDate);\n  const categoryStats: Record<string, { completed: number; total: number; percentage: number }> = {};\n  \n  periodTasks.forEach(task => {\n    if (!categoryStats[task.category]) {\n      categoryStats[task.category] = { completed: 0, total: 0, percentage: 0 };\n    }\n    \n    categoryStats[task.category].total++;\n    if (task.isCompleted) {\n      categoryStats[task.category].completed++;\n    }\n  });\n  \n  // Calculate percentages\n  Object.keys(categoryStats).forEach(category => {\n    const stats = categoryStats[category];\n    stats.percentage = stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;\n  });\n  \n  return categoryStats;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}