{"ast":null,"code":"'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableFreeze = enableFreeze;\nexports.enableScreens = enableScreens;\nexports.freezeEnabled = freezeEnabled;\nexports.isNativePlatformSupported = void 0;\nexports.screensEnabled = screensEnabled;\nexports.shouldUseActivityState = void 0;\nvar _reactNative = require(\"react-native\");\nvar shouldUseActivityState = exports.shouldUseActivityState = true;\nvar isNativePlatformSupported = exports.isNativePlatformSupported = _reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'windows';\nvar ENABLE_SCREENS = isNativePlatformSupported;\nfunction enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n  if (!isNativePlatformSupported) {\n    return;\n  }\n  if (ENABLE_SCREENS && !_reactNative.UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(`Screen native module hasn't been linked. Please check the react-native-screens README for more details`);\n  }\n}\nvar ENABLE_FREEZE = false;\nfunction enableFreeze() {\n  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  if (!isNativePlatformSupported) {\n    return;\n  }\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\nfunction screensEnabled() {\n  return ENABLE_SCREENS;\n}\nfunction freezeEnabled() {\n  return ENABLE_FREEZE;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enableFreeze","enableScreens","freezeEnabled","isNativePlatformSupported","screensEnabled","shouldUseActivityState","_reactNative","require","Platform","OS","ENABLE_SCREENS","shouldEnableScreens","arguments","length","undefined","UIManager","getViewManagerConfig","console","error","ENABLE_FREEZE","shouldEnableReactFreeze"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/node_modules/react-native-screens/src/core.ts"],"sourcesContent":["'use client';\n\nimport { Platform, UIManager } from 'react-native';\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nexport const shouldUseActivityState = true;\n\nexport const isNativePlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isNativePlatformSupported;\n\nexport function enableScreens(shouldEnableScreens = true) {\n  ENABLE_SCREENS = shouldEnableScreens;\n\n  if (!isNativePlatformSupported) {\n    return;\n  }\n\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`,\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nexport function enableFreeze(shouldEnableReactFreeze = true) {\n  if (!isNativePlatformSupported) {\n    return;\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\n\nexport function freezeEnabled() {\n  return ENABLE_FREEZE;\n}\n"],"mappings":"AAAA,YAAY;;AAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,YAAA,GAAAA,YAAA;AAAAF,OAAA,CAAAG,aAAA,GAAAA,aAAA;AAAAH,OAAA,CAAAI,aAAA,GAAAA,aAAA;AAAAJ,OAAA,CAAAK,yBAAA;AAAAL,OAAA,CAAAM,cAAA,GAAAA,cAAA;AAAAN,OAAA,CAAAO,sBAAA;AAEZ,IAAAC,YAAA,GAAAC,OAAA;AAGO,IAAMF,sBAAsB,GAAAP,OAAA,CAAAO,sBAAA,GAAG,IAAI;AAEnC,IAAMF,yBAAyB,GAAAL,OAAA,CAAAK,yBAAA,GACpCK,qBAAQ,CAACC,EAAE,KAAK,KAAK,IACrBD,qBAAQ,CAACC,EAAE,KAAK,SAAS,IACzBD,qBAAQ,CAACC,EAAE,KAAK,SAAS;AAE3B,IAAIC,cAAc,GAAGP,yBAAyB;AAEvC,SAASF,aAAaA,CAAA,EAA6B;EAAA,IAA5BU,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACtDF,cAAc,GAAGC,mBAAmB;EAEpC,IAAI,CAACR,yBAAyB,EAAE;IAC9B;EACF;EAEA,IAAIO,cAAc,IAAI,CAACK,sBAAS,CAACC,oBAAoB,CAAC,WAAW,CAAC,EAAE;IAClEC,OAAO,CAACC,KAAK,CACV,wGACH,CAAC;EACH;AACF;AAEA,IAAIC,aAAa,GAAG,KAAK;AAElB,SAASnB,YAAYA,CAAA,EAAiC;EAAA,IAAhCoB,uBAAuB,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACzD,IAAI,CAACT,yBAAyB,EAAE;IAC9B;EACF;EAEAgB,aAAa,GAAGC,uBAAuB;AACzC;AAEO,SAAShB,cAAcA,CAAA,EAAG;EAC/B,OAAOM,cAAc;AACvB;AAEO,SAASR,aAAaA,CAAA,EAAG;EAC9B,OAAOiB,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}