{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.suggestTaskTimeSlots = exports.searchTasks = exports.prioritizeTasks = exports.isTaskDueSoon = exports.groupTasksByPriority = exports.groupTasksByDate = exports.groupTasksByCategory = exports.getTasksDueWithin = exports.getRecentlyCompletedTasks = exports.getNextTask = exports.getCategoryStats = exports.estimateTotalTime = exports.canCompleteTaskInTime = exports.calculateTaskUrgency = exports.calculateCompletionRate = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _helpers = require(\"./helpers\");\nvar calculateTaskUrgency = exports.calculateTaskUrgency = function calculateTaskUrgency(task) {\n  var now = new Date();\n  var dueDate = new Date(task.dueDate);\n  var daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n  var priorityWeights = {\n    high: 3,\n    medium: 2,\n    low: 1\n  };\n  var urgency = priorityWeights[task.priority] * 10;\n  if (daysUntilDue < 0) {\n    urgency += 50 + Math.abs(daysUntilDue) * 5;\n  } else if (daysUntilDue === 0) {\n    urgency += 30;\n  } else if (daysUntilDue === 1) {\n    urgency += 20;\n  } else if (daysUntilDue <= 3) {\n    urgency += 15;\n  } else if (daysUntilDue <= 7) {\n    urgency += 10;\n  }\n  return urgency;\n};\nvar groupTasksByDate = exports.groupTasksByDate = function groupTasksByDate(tasks) {\n  var groups = {};\n  tasks.forEach(function (task) {\n    var dateKey = (0, _helpers.formatDateString)(task.dueDate);\n    if (!groups[dateKey]) {\n      groups[dateKey] = [];\n    }\n    groups[dateKey].push(task);\n  });\n  return groups;\n};\nvar groupTasksByCategory = exports.groupTasksByCategory = function groupTasksByCategory(tasks) {\n  var groups = {};\n  tasks.forEach(function (task) {\n    if (!groups[task.category]) {\n      groups[task.category] = [];\n    }\n    groups[task.category].push(task);\n  });\n  return groups;\n};\nvar groupTasksByPriority = exports.groupTasksByPriority = function groupTasksByPriority(tasks) {\n  var groups = {\n    high: [],\n    medium: [],\n    low: []\n  };\n  tasks.forEach(function (task) {\n    groups[task.priority].push(task);\n  });\n  return groups;\n};\nvar searchTasks = exports.searchTasks = function searchTasks(tasks, query) {\n  if (!query.trim()) {\n    return tasks;\n  }\n  var searchTerm = query.toLowerCase().trim();\n  return tasks.filter(function (task) {\n    return task.title.toLowerCase().includes(searchTerm) || task.description && task.description.toLowerCase().includes(searchTerm) || task.category.toLowerCase().includes(searchTerm);\n  });\n};\nvar getTasksDueWithin = exports.getTasksDueWithin = function getTasksDueWithin(tasks, days) {\n  var now = new Date();\n  var futureDate = new Date();\n  futureDate.setDate(futureDate.getDate() + days);\n  return tasks.filter(function (task) {\n    var dueDate = new Date(task.dueDate);\n    return dueDate >= now && dueDate <= futureDate && !task.isCompleted;\n  });\n};\nvar getRecentlyCompletedTasks = exports.getRecentlyCompletedTasks = function getRecentlyCompletedTasks(tasks, days) {\n  var cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  return tasks.filter(function (task) {\n    return task.isCompleted && task.completedAt && task.completedAt >= cutoffDate;\n  });\n};\nvar calculateCompletionRate = exports.calculateCompletionRate = function calculateCompletionRate(tasks, days) {\n  var cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  var relevantTasks = tasks.filter(function (task) {\n    var taskDate = task.completedAt || task.dueDate;\n    return taskDate >= cutoffDate;\n  });\n  if (relevantTasks.length === 0) {\n    return 0;\n  }\n  var completedTasks = relevantTasks.filter(function (task) {\n    return task.isCompleted;\n  }).length;\n  return completedTasks / relevantTasks.length * 100;\n};\nvar suggestTaskTimeSlots = exports.suggestTaskTimeSlots = function suggestTaskTimeSlots(task, availableSlots) {\n  if (!task.estimatedDuration) {\n    return availableSlots;\n  }\n  var requiredMinutes = task.estimatedDuration;\n  return availableSlots.filter(function (slot) {\n    var slotDuration = (slot.end.getTime() - slot.start.getTime()) / (1000 * 60);\n    return slotDuration >= requiredMinutes;\n  });\n};\nvar prioritizeTasks = exports.prioritizeTasks = function prioritizeTasks(tasks) {\n  return (0, _toConsumableArray2.default)(tasks).sort(function (a, b) {\n    if (a.isCompleted !== b.isCompleted) {\n      return a.isCompleted ? 1 : -1;\n    }\n    if (!a.isCompleted && !b.isCompleted) {\n      var urgencyA = calculateTaskUrgency(a);\n      var urgencyB = calculateTaskUrgency(b);\n      return urgencyB - urgencyA;\n    }\n    if (a.isCompleted && b.isCompleted) {\n      var _a$completedAt, _b$completedAt;\n      var completedAtA = ((_a$completedAt = a.completedAt) == null ? void 0 : _a$completedAt.getTime()) || 0;\n      var completedAtB = ((_b$completedAt = b.completedAt) == null ? void 0 : _b$completedAt.getTime()) || 0;\n      return completedAtB - completedAtA;\n    }\n    return 0;\n  });\n};\nvar getCategoryStats = exports.getCategoryStats = function getCategoryStats(tasks, category) {\n  var categoryTasks = tasks.filter(function (task) {\n    return task.category === category;\n  });\n  var completed = categoryTasks.filter(function (task) {\n    return task.isCompleted;\n  }).length;\n  var pending = categoryTasks.length - completed;\n  var overdue = categoryTasks.filter(function (task) {\n    return !task.isCompleted && (0, _helpers.isPastDate)(task.dueDate);\n  }).length;\n  return {\n    total: categoryTasks.length,\n    completed: completed,\n    pending: pending,\n    overdue: overdue,\n    completionRate: categoryTasks.length > 0 ? completed / categoryTasks.length * 100 : 0\n  };\n};\nvar estimateTotalTime = exports.estimateTotalTime = function estimateTotalTime(tasks) {\n  return tasks.reduce(function (total, task) {\n    return total + (task.estimatedDuration || 0);\n  }, 0);\n};\nvar isTaskDueSoon = exports.isTaskDueSoon = function isTaskDueSoon(task) {\n  var hoursThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  if (task.isCompleted) {\n    return false;\n  }\n  var now = new Date();\n  var dueDate = new Date(task.dueDate);\n  var hoursUntilDue = (dueDate.getTime() - now.getTime()) / (1000 * 60 * 60);\n  return hoursUntilDue > 0 && hoursUntilDue <= hoursThreshold;\n};\nvar getNextTask = exports.getNextTask = function getNextTask(tasks) {\n  var incompleteTasks = tasks.filter(function (task) {\n    return !task.isCompleted;\n  });\n  if (incompleteTasks.length === 0) {\n    return null;\n  }\n  var prioritizedTasks = prioritizeTasks(incompleteTasks);\n  return prioritizedTasks[0];\n};\nvar canCompleteTaskInTime = exports.canCompleteTaskInTime = function canCompleteTaskInTime(task, availableMinutes) {\n  if (!task.estimatedDuration) {\n    return true;\n  }\n  return task.estimatedDuration <= availableMinutes;\n};","map":{"version":3,"names":["_helpers","require","calculateTaskUrgency","exports","task","now","Date","dueDate","daysUntilDue","Math","ceil","getTime","priorityWeights","high","medium","low","urgency","priority","abs","groupTasksByDate","tasks","groups","forEach","dateKey","formatDateString","push","groupTasksByCategory","category","groupTasksByPriority","searchTasks","query","trim","searchTerm","toLowerCase","filter","title","includes","description","getTasksDueWithin","days","futureDate","setDate","getDate","isCompleted","getRecentlyCompletedTasks","cutoffDate","completedAt","calculateCompletionRate","relevantTasks","taskDate","length","completedTasks","suggestTaskTimeSlots","availableSlots","estimatedDuration","requiredMinutes","slot","slotDuration","end","start","prioritizeTasks","_toConsumableArray2","default","sort","a","b","urgencyA","urgencyB","_a$completedAt","_b$completedAt","completedAtA","completedAtB","getCategoryStats","categoryTasks","completed","pending","overdue","isPastDate","total","completionRate","estimateTotalTime","reduce","isTaskDueSoon","hoursThreshold","arguments","undefined","hoursUntilDue","getNextTask","incompleteTasks","prioritizedTasks","canCompleteTaskInTime","availableMinutes"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/src/utils/taskUtils.ts"],"sourcesContent":["import { Task } from '../types';\nimport { isPastDate, formatDateString } from './helpers';\n\n/**\n * Task utility functions for advanced operations\n */\n\n/**\n * Calculates the urgency score of a task based on due date and priority\n */\nexport const calculateTaskUrgency = (task: Task): number => {\n  const now = new Date();\n  const dueDate = new Date(task.dueDate);\n  const daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n  \n  // Priority weights\n  const priorityWeights = {\n    high: 3,\n    medium: 2,\n    low: 1,\n  };\n  \n  // Base urgency from priority\n  let urgency = priorityWeights[task.priority] * 10;\n  \n  // Adjust based on due date\n  if (daysUntilDue < 0) {\n    // Overdue tasks get maximum urgency\n    urgency += 50 + Math.abs(daysUntilDue) * 5;\n  } else if (daysUntilDue === 0) {\n    // Due today\n    urgency += 30;\n  } else if (daysUntilDue === 1) {\n    // Due tomorrow\n    urgency += 20;\n  } else if (daysUntilDue <= 3) {\n    // Due within 3 days\n    urgency += 15;\n  } else if (daysUntilDue <= 7) {\n    // Due within a week\n    urgency += 10;\n  }\n  \n  return urgency;\n};\n\n/**\n * Groups tasks by their due date\n */\nexport const groupTasksByDate = (tasks: Task[]): Record<string, Task[]> => {\n  const groups: Record<string, Task[]> = {};\n  \n  tasks.forEach(task => {\n    const dateKey = formatDateString(task.dueDate);\n    if (!groups[dateKey]) {\n      groups[dateKey] = [];\n    }\n    groups[dateKey].push(task);\n  });\n  \n  return groups;\n};\n\n/**\n * Groups tasks by category\n */\nexport const groupTasksByCategory = (tasks: Task[]): Record<string, Task[]> => {\n  const groups: Record<string, Task[]> = {};\n  \n  tasks.forEach(task => {\n    if (!groups[task.category]) {\n      groups[task.category] = [];\n    }\n    groups[task.category].push(task);\n  });\n  \n  return groups;\n};\n\n/**\n * Groups tasks by priority\n */\nexport const groupTasksByPriority = (tasks: Task[]): Record<string, Task[]> => {\n  const groups: Record<string, Task[]> = {\n    high: [],\n    medium: [],\n    low: [],\n  };\n  \n  tasks.forEach(task => {\n    groups[task.priority].push(task);\n  });\n  \n  return groups;\n};\n\n/**\n * Filters tasks based on search query\n */\nexport const searchTasks = (tasks: Task[], query: string): Task[] => {\n  if (!query.trim()) {\n    return tasks;\n  }\n  \n  const searchTerm = query.toLowerCase().trim();\n  \n  return tasks.filter(task => \n    task.title.toLowerCase().includes(searchTerm) ||\n    (task.description && task.description.toLowerCase().includes(searchTerm)) ||\n    task.category.toLowerCase().includes(searchTerm)\n  );\n};\n\n/**\n * Gets tasks that are due within a specified number of days\n */\nexport const getTasksDueWithin = (tasks: Task[], days: number): Task[] => {\n  const now = new Date();\n  const futureDate = new Date();\n  futureDate.setDate(futureDate.getDate() + days);\n  \n  return tasks.filter(task => {\n    const dueDate = new Date(task.dueDate);\n    return dueDate >= now && dueDate <= futureDate && !task.isCompleted;\n  });\n};\n\n/**\n * Gets tasks that were completed within a specified number of days\n */\nexport const getRecentlyCompletedTasks = (tasks: Task[], days: number): Task[] => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  \n  return tasks.filter(task => \n    task.isCompleted && \n    task.completedAt && \n    task.completedAt >= cutoffDate\n  );\n};\n\n/**\n * Calculates completion rate for a given time period\n */\nexport const calculateCompletionRate = (tasks: Task[], days: number): number => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  \n  const relevantTasks = tasks.filter(task => {\n    const taskDate = task.completedAt || task.dueDate;\n    return taskDate >= cutoffDate;\n  });\n  \n  if (relevantTasks.length === 0) {\n    return 0;\n  }\n  \n  const completedTasks = relevantTasks.filter(task => task.isCompleted).length;\n  return (completedTasks / relevantTasks.length) * 100;\n};\n\n/**\n * Suggests optimal time slots for task completion based on estimated duration\n */\nexport const suggestTaskTimeSlots = (\n  task: Task,\n  availableSlots: { start: Date; end: Date }[]\n): { start: Date; end: Date }[] => {\n  if (!task.estimatedDuration) {\n    return availableSlots;\n  }\n  \n  const requiredMinutes = task.estimatedDuration;\n  \n  return availableSlots.filter(slot => {\n    const slotDuration = (slot.end.getTime() - slot.start.getTime()) / (1000 * 60);\n    return slotDuration >= requiredMinutes;\n  });\n};\n\n/**\n * Prioritizes tasks based on multiple factors\n */\nexport const prioritizeTasks = (tasks: Task[]): Task[] => {\n  return [...tasks].sort((a, b) => {\n    // First, sort by completion status (incomplete tasks first)\n    if (a.isCompleted !== b.isCompleted) {\n      return a.isCompleted ? 1 : -1;\n    }\n    \n    // For incomplete tasks, sort by urgency\n    if (!a.isCompleted && !b.isCompleted) {\n      const urgencyA = calculateTaskUrgency(a);\n      const urgencyB = calculateTaskUrgency(b);\n      return urgencyB - urgencyA;\n    }\n    \n    // For completed tasks, sort by completion date (most recent first)\n    if (a.isCompleted && b.isCompleted) {\n      const completedAtA = a.completedAt?.getTime() || 0;\n      const completedAtB = b.completedAt?.getTime() || 0;\n      return completedAtB - completedAtA;\n    }\n    \n    return 0;\n  });\n};\n\n/**\n * Gets task statistics for a specific category\n */\nexport const getCategoryStats = (tasks: Task[], category: string) => {\n  const categoryTasks = tasks.filter(task => task.category === category);\n  const completed = categoryTasks.filter(task => task.isCompleted).length;\n  const pending = categoryTasks.length - completed;\n  const overdue = categoryTasks.filter(task => \n    !task.isCompleted && isPastDate(task.dueDate)\n  ).length;\n  \n  return {\n    total: categoryTasks.length,\n    completed,\n    pending,\n    overdue,\n    completionRate: categoryTasks.length > 0 ? (completed / categoryTasks.length) * 100 : 0,\n  };\n};\n\n/**\n * Estimates total time required for a list of tasks\n */\nexport const estimateTotalTime = (tasks: Task[]): number => {\n  return tasks.reduce((total, task) => {\n    return total + (task.estimatedDuration || 0);\n  }, 0);\n};\n\n/**\n * Checks if a task is due soon (within next 24 hours)\n */\nexport const isTaskDueSoon = (task: Task, hoursThreshold: number = 24): boolean => {\n  if (task.isCompleted) {\n    return false;\n  }\n  \n  const now = new Date();\n  const dueDate = new Date(task.dueDate);\n  const hoursUntilDue = (dueDate.getTime() - now.getTime()) / (1000 * 60 * 60);\n  \n  return hoursUntilDue > 0 && hoursUntilDue <= hoursThreshold;\n};\n\n/**\n * Gets the next task that should be worked on based on priority and due date\n */\nexport const getNextTask = (tasks: Task[]): Task | null => {\n  const incompleteTasks = tasks.filter(task => !task.isCompleted);\n  \n  if (incompleteTasks.length === 0) {\n    return null;\n  }\n  \n  const prioritizedTasks = prioritizeTasks(incompleteTasks);\n  return prioritizedTasks[0];\n};\n\n/**\n * Validates if a task can be completed within available time\n */\nexport const canCompleteTaskInTime = (\n  task: Task,\n  availableMinutes: number\n): boolean => {\n  if (!task.estimatedDuration) {\n    return true; // Assume it can be completed if no duration is specified\n  }\n  \n  return task.estimatedDuration <= availableMinutes;\n};"],"mappings":";;;;;;AACA,IAAAA,QAAA,GAAAC,OAAA;AASO,IAAMC,oBAAoB,GAAAC,OAAA,CAAAD,oBAAA,GAAG,SAAvBA,oBAAoBA,CAAIE,IAAU,EAAa;EAC1D,IAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAMC,OAAO,GAAG,IAAID,IAAI,CAACF,IAAI,CAACG,OAAO,CAAC;EACtC,IAAMC,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACH,OAAO,CAACI,OAAO,CAAC,CAAC,GAAGN,GAAG,CAACM,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAG3F,IAAMC,eAAe,GAAG;IACtBC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,GAAG,EAAE;EACP,CAAC;EAGD,IAAIC,OAAO,GAAGJ,eAAe,CAACR,IAAI,CAACa,QAAQ,CAAC,GAAG,EAAE;EAGjD,IAAIT,YAAY,GAAG,CAAC,EAAE;IAEpBQ,OAAO,IAAI,EAAE,GAAGP,IAAI,CAACS,GAAG,CAACV,YAAY,CAAC,GAAG,CAAC;EAC5C,CAAC,MAAM,IAAIA,YAAY,KAAK,CAAC,EAAE;IAE7BQ,OAAO,IAAI,EAAE;EACf,CAAC,MAAM,IAAIR,YAAY,KAAK,CAAC,EAAE;IAE7BQ,OAAO,IAAI,EAAE;EACf,CAAC,MAAM,IAAIR,YAAY,IAAI,CAAC,EAAE;IAE5BQ,OAAO,IAAI,EAAE;EACf,CAAC,MAAM,IAAIR,YAAY,IAAI,CAAC,EAAE;IAE5BQ,OAAO,IAAI,EAAE;EACf;EAEA,OAAOA,OAAO;AAChB,CAAC;AAKM,IAAMG,gBAAgB,GAAAhB,OAAA,CAAAgB,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAIC,KAAa,EAA6B;EACzE,IAAMC,MAA8B,GAAG,CAAC,CAAC;EAEzCD,KAAK,CAACE,OAAO,CAAC,UAAAlB,IAAI,EAAI;IACpB,IAAMmB,OAAO,GAAG,IAAAC,yBAAgB,EAACpB,IAAI,CAACG,OAAO,CAAC;IAC9C,IAAI,CAACc,MAAM,CAACE,OAAO,CAAC,EAAE;MACpBF,MAAM,CAACE,OAAO,CAAC,GAAG,EAAE;IACtB;IACAF,MAAM,CAACE,OAAO,CAAC,CAACE,IAAI,CAACrB,IAAI,CAAC;EAC5B,CAAC,CAAC;EAEF,OAAOiB,MAAM;AACf,CAAC;AAKM,IAAMK,oBAAoB,GAAAvB,OAAA,CAAAuB,oBAAA,GAAG,SAAvBA,oBAAoBA,CAAIN,KAAa,EAA6B;EAC7E,IAAMC,MAA8B,GAAG,CAAC,CAAC;EAEzCD,KAAK,CAACE,OAAO,CAAC,UAAAlB,IAAI,EAAI;IACpB,IAAI,CAACiB,MAAM,CAACjB,IAAI,CAACuB,QAAQ,CAAC,EAAE;MAC1BN,MAAM,CAACjB,IAAI,CAACuB,QAAQ,CAAC,GAAG,EAAE;IAC5B;IACAN,MAAM,CAACjB,IAAI,CAACuB,QAAQ,CAAC,CAACF,IAAI,CAACrB,IAAI,CAAC;EAClC,CAAC,CAAC;EAEF,OAAOiB,MAAM;AACf,CAAC;AAKM,IAAMO,oBAAoB,GAAAzB,OAAA,CAAAyB,oBAAA,GAAG,SAAvBA,oBAAoBA,CAAIR,KAAa,EAA6B;EAC7E,IAAMC,MAA8B,GAAG;IACrCR,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,EAAE;IACVC,GAAG,EAAE;EACP,CAAC;EAEDK,KAAK,CAACE,OAAO,CAAC,UAAAlB,IAAI,EAAI;IACpBiB,MAAM,CAACjB,IAAI,CAACa,QAAQ,CAAC,CAACQ,IAAI,CAACrB,IAAI,CAAC;EAClC,CAAC,CAAC;EAEF,OAAOiB,MAAM;AACf,CAAC;AAKM,IAAMQ,WAAW,GAAA1B,OAAA,CAAA0B,WAAA,GAAG,SAAdA,WAAWA,CAAIT,KAAa,EAAEU,KAAa,EAAa;EACnE,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;IACjB,OAAOX,KAAK;EACd;EAEA,IAAMY,UAAU,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC;EAE7C,OAAOX,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI;IAAA,OACtBA,IAAI,CAAC+B,KAAK,CAACF,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC,IAC5C5B,IAAI,CAACiC,WAAW,IAAIjC,IAAI,CAACiC,WAAW,CAACJ,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAE,IACzE5B,IAAI,CAACuB,QAAQ,CAACM,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC;EAAA,CAClD,CAAC;AACH,CAAC;AAKM,IAAMM,iBAAiB,GAAAnC,OAAA,CAAAmC,iBAAA,GAAG,SAApBA,iBAAiBA,CAAIlB,KAAa,EAAEmB,IAAY,EAAa;EACxE,IAAMlC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAMkC,UAAU,GAAG,IAAIlC,IAAI,CAAC,CAAC;EAC7BkC,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,GAAGH,IAAI,CAAC;EAE/C,OAAOnB,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI,EAAI;IAC1B,IAAMG,OAAO,GAAG,IAAID,IAAI,CAACF,IAAI,CAACG,OAAO,CAAC;IACtC,OAAOA,OAAO,IAAIF,GAAG,IAAIE,OAAO,IAAIiC,UAAU,IAAI,CAACpC,IAAI,CAACuC,WAAW;EACrE,CAAC,CAAC;AACJ,CAAC;AAKM,IAAMC,yBAAyB,GAAAzC,OAAA,CAAAyC,yBAAA,GAAG,SAA5BA,yBAAyBA,CAAIxB,KAAa,EAAEmB,IAAY,EAAa;EAChF,IAAMM,UAAU,GAAG,IAAIvC,IAAI,CAAC,CAAC;EAC7BuC,UAAU,CAACJ,OAAO,CAACI,UAAU,CAACH,OAAO,CAAC,CAAC,GAAGH,IAAI,CAAC;EAE/C,OAAOnB,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI;IAAA,OACtBA,IAAI,CAACuC,WAAW,IAChBvC,IAAI,CAAC0C,WAAW,IAChB1C,IAAI,CAAC0C,WAAW,IAAID,UAAU;EAAA,CAChC,CAAC;AACH,CAAC;AAKM,IAAME,uBAAuB,GAAA5C,OAAA,CAAA4C,uBAAA,GAAG,SAA1BA,uBAAuBA,CAAI3B,KAAa,EAAEmB,IAAY,EAAa;EAC9E,IAAMM,UAAU,GAAG,IAAIvC,IAAI,CAAC,CAAC;EAC7BuC,UAAU,CAACJ,OAAO,CAACI,UAAU,CAACH,OAAO,CAAC,CAAC,GAAGH,IAAI,CAAC;EAE/C,IAAMS,aAAa,GAAG5B,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI,EAAI;IACzC,IAAM6C,QAAQ,GAAG7C,IAAI,CAAC0C,WAAW,IAAI1C,IAAI,CAACG,OAAO;IACjD,OAAO0C,QAAQ,IAAIJ,UAAU;EAC/B,CAAC,CAAC;EAEF,IAAIG,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAO,CAAC;EACV;EAEA,IAAMC,cAAc,GAAGH,aAAa,CAACd,MAAM,CAAC,UAAA9B,IAAI;IAAA,OAAIA,IAAI,CAACuC,WAAW;EAAA,EAAC,CAACO,MAAM;EAC5E,OAAQC,cAAc,GAAGH,aAAa,CAACE,MAAM,GAAI,GAAG;AACtD,CAAC;AAKM,IAAME,oBAAoB,GAAAjD,OAAA,CAAAiD,oBAAA,GAAG,SAAvBA,oBAAoBA,CAC/BhD,IAAU,EACViD,cAA4C,EACX;EACjC,IAAI,CAACjD,IAAI,CAACkD,iBAAiB,EAAE;IAC3B,OAAOD,cAAc;EACvB;EAEA,IAAME,eAAe,GAAGnD,IAAI,CAACkD,iBAAiB;EAE9C,OAAOD,cAAc,CAACnB,MAAM,CAAC,UAAAsB,IAAI,EAAI;IACnC,IAAMC,YAAY,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC/C,OAAO,CAAC,CAAC,GAAG6C,IAAI,CAACG,KAAK,CAAChD,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,CAAC;IAC9E,OAAO8C,YAAY,IAAIF,eAAe;EACxC,CAAC,CAAC;AACJ,CAAC;AAKM,IAAMK,eAAe,GAAAzD,OAAA,CAAAyD,eAAA,GAAG,SAAlBA,eAAeA,CAAIxC,KAAa,EAAa;EACxD,OAAO,IAAAyC,mBAAA,CAAAC,OAAA,EAAI1C,KAAK,EAAE2C,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IAE/B,IAAID,CAAC,CAACrB,WAAW,KAAKsB,CAAC,CAACtB,WAAW,EAAE;MACnC,OAAOqB,CAAC,CAACrB,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B;IAGA,IAAI,CAACqB,CAAC,CAACrB,WAAW,IAAI,CAACsB,CAAC,CAACtB,WAAW,EAAE;MACpC,IAAMuB,QAAQ,GAAGhE,oBAAoB,CAAC8D,CAAC,CAAC;MACxC,IAAMG,QAAQ,GAAGjE,oBAAoB,CAAC+D,CAAC,CAAC;MACxC,OAAOE,QAAQ,GAAGD,QAAQ;IAC5B;IAGA,IAAIF,CAAC,CAACrB,WAAW,IAAIsB,CAAC,CAACtB,WAAW,EAAE;MAAA,IAAAyB,cAAA,EAAAC,cAAA;MAClC,IAAMC,YAAY,GAAG,EAAAF,cAAA,GAAAJ,CAAC,CAAClB,WAAW,qBAAbsB,cAAA,CAAezD,OAAO,CAAC,CAAC,KAAI,CAAC;MAClD,IAAM4D,YAAY,GAAG,EAAAF,cAAA,GAAAJ,CAAC,CAACnB,WAAW,qBAAbuB,cAAA,CAAe1D,OAAO,CAAC,CAAC,KAAI,CAAC;MAClD,OAAO4D,YAAY,GAAGD,YAAY;IACpC;IAEA,OAAO,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAKM,IAAME,gBAAgB,GAAArE,OAAA,CAAAqE,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAIpD,KAAa,EAAEO,QAAgB,EAAK;EACnE,IAAM8C,aAAa,GAAGrD,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI;IAAA,OAAIA,IAAI,CAACuB,QAAQ,KAAKA,QAAQ;EAAA,EAAC;EACtE,IAAM+C,SAAS,GAAGD,aAAa,CAACvC,MAAM,CAAC,UAAA9B,IAAI;IAAA,OAAIA,IAAI,CAACuC,WAAW;EAAA,EAAC,CAACO,MAAM;EACvE,IAAMyB,OAAO,GAAGF,aAAa,CAACvB,MAAM,GAAGwB,SAAS;EAChD,IAAME,OAAO,GAAGH,aAAa,CAACvC,MAAM,CAAC,UAAA9B,IAAI;IAAA,OACvC,CAACA,IAAI,CAACuC,WAAW,IAAI,IAAAkC,mBAAU,EAACzE,IAAI,CAACG,OAAO,CAAC;EAAA,CAC/C,CAAC,CAAC2C,MAAM;EAER,OAAO;IACL4B,KAAK,EAAEL,aAAa,CAACvB,MAAM;IAC3BwB,SAAS,EAATA,SAAS;IACTC,OAAO,EAAPA,OAAO;IACPC,OAAO,EAAPA,OAAO;IACPG,cAAc,EAAEN,aAAa,CAACvB,MAAM,GAAG,CAAC,GAAIwB,SAAS,GAAGD,aAAa,CAACvB,MAAM,GAAI,GAAG,GAAG;EACxF,CAAC;AACH,CAAC;AAKM,IAAM8B,iBAAiB,GAAA7E,OAAA,CAAA6E,iBAAA,GAAG,SAApBA,iBAAiBA,CAAI5D,KAAa,EAAa;EAC1D,OAAOA,KAAK,CAAC6D,MAAM,CAAC,UAACH,KAAK,EAAE1E,IAAI,EAAK;IACnC,OAAO0E,KAAK,IAAI1E,IAAI,CAACkD,iBAAiB,IAAI,CAAC,CAAC;EAC9C,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAKM,IAAM4B,aAAa,GAAA/E,OAAA,CAAA+E,aAAA,GAAG,SAAhBA,aAAaA,CAAI9E,IAAU,EAA2C;EAAA,IAAzC+E,cAAsB,GAAAC,SAAA,CAAAlC,MAAA,QAAAkC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACnE,IAAIhF,IAAI,CAACuC,WAAW,EAAE;IACpB,OAAO,KAAK;EACd;EAEA,IAAMtC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAMC,OAAO,GAAG,IAAID,IAAI,CAACF,IAAI,CAACG,OAAO,CAAC;EACtC,IAAM+E,aAAa,GAAG,CAAC/E,OAAO,CAACI,OAAO,CAAC,CAAC,GAAGN,GAAG,CAACM,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;EAE5E,OAAO2E,aAAa,GAAG,CAAC,IAAIA,aAAa,IAAIH,cAAc;AAC7D,CAAC;AAKM,IAAMI,WAAW,GAAApF,OAAA,CAAAoF,WAAA,GAAG,SAAdA,WAAWA,CAAInE,KAAa,EAAkB;EACzD,IAAMoE,eAAe,GAAGpE,KAAK,CAACc,MAAM,CAAC,UAAA9B,IAAI;IAAA,OAAI,CAACA,IAAI,CAACuC,WAAW;EAAA,EAAC;EAE/D,IAAI6C,eAAe,CAACtC,MAAM,KAAK,CAAC,EAAE;IAChC,OAAO,IAAI;EACb;EAEA,IAAMuC,gBAAgB,GAAG7B,eAAe,CAAC4B,eAAe,CAAC;EACzD,OAAOC,gBAAgB,CAAC,CAAC,CAAC;AAC5B,CAAC;AAKM,IAAMC,qBAAqB,GAAAvF,OAAA,CAAAuF,qBAAA,GAAG,SAAxBA,qBAAqBA,CAChCtF,IAAU,EACVuF,gBAAwB,EACZ;EACZ,IAAI,CAACvF,IAAI,CAACkD,iBAAiB,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA,OAAOlD,IAAI,CAACkD,iBAAiB,IAAIqC,gBAAgB;AACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}