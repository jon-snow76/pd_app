{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _TimetableContext = require(\"../context/TimetableContext\");\nvar _TasksContext = require(\"../context/TasksContext\");\nvar _MedicationContext = require(\"../context/MedicationContext\");\nvar _ProgressChart = _interopRequireDefault(require(\"../components/ProgressChart\"));\nvar _progressUtils = require(\"../utils/progressUtils\");\nvar _storage = require(\"../utils/storage\");\nvar _helpers = require(\"../utils/helpers\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"/Users/vaishnavkrishnan/Documents/projects/pd_app/src/screens/ProgressScreen.tsx\";\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar _Dimensions$get = _reactNative.Dimensions.get('window'),\n  width = _Dimensions$get.width;\nvar ProgressScreen = function ProgressScreen() {\n  var _useTimetable = (0, _TimetableContext.useTimetable)(),\n    timetableState = _useTimetable.state;\n  var _useTasks = (0, _TasksContext.useTasks)(),\n    tasksState = _useTasks.state;\n  var _useMedication = (0, _MedicationContext.useMedication)(),\n    medicationState = _useMedication.state;\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    productivityLogs = _useState2[0],\n    setProductivityLogs = _useState2[1];\n  var _useState3 = (0, _react.useState)('week'),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    selectedPeriod = _useState4[0],\n    setSelectedPeriod = _useState4[1];\n  var _useState5 = (0, _react.useState)(false),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    refreshing = _useState6[0],\n    setRefreshing = _useState6[1];\n  var _useState7 = (0, _react.useState)(true),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  (0, _react.useEffect)(function () {\n    loadProgressData();\n  }, []);\n  (0, _react.useEffect)(function () {\n    generateTodaysLog();\n  }, [timetableState.events, tasksState.tasks, medicationState.medications]);\n  var loadProgressData = function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        setLoading(true);\n        var logs = yield (0, _storage.loadProductivityLogs)();\n        setProductivityLogs(logs);\n      } catch (error) {\n        console.error('Error loading progress data:', error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadProgressData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var generateTodaysLog = function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        var today = new Date();\n        var todayLog = (0, _progressUtils.generateProductivityLog)(tasksState.tasks, timetableState.events, medicationState.medications, today);\n        var existingLog = yield (0, _storage.getProductivityLogForDate)((0, _helpers.formatDateString)(today));\n        if (!existingLog || existingLog.productivityScore !== todayLog.productivityScore) {\n          yield (0, _storage.addProductivityLog)(todayLog);\n          setProductivityLogs(function (prev) {\n            var filtered = prev.filter(function (log) {\n              return log.date !== todayLog.date;\n            });\n            return [].concat((0, _toConsumableArray2.default)(filtered), [todayLog]).sort(function (a, b) {\n              return new Date(b.date).getTime() - new Date(a.date).getTime();\n            });\n          });\n        }\n      } catch (error) {\n        console.error('Error generating today\\'s log:', error);\n      }\n    });\n    return function generateTodaysLog() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleRefresh = function () {\n    var _ref3 = (0, _asyncToGenerator2.default)(function* () {\n      setRefreshing(true);\n      yield loadProgressData();\n      yield generateTodaysLog();\n      setRefreshing(false);\n    });\n    return function handleRefresh() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var weeklyStats = (0, _progressUtils.calculateWeeklyStats)(productivityLogs);\n  var monthlyStats = (0, _progressUtils.calculateMonthlyStats)(productivityLogs, new Date().getMonth(), new Date().getFullYear());\n  var insights = (0, _progressUtils.getProductivityInsights)(tasksState.tasks, timetableState.events, medicationState.medications, productivityLogs);\n  var chartData = (0, _progressUtils.generateChartData)(productivityLogs, selectedPeriod);\n  var categoryStats = (0, _progressUtils.calculateCategoryStats)(tasksState.tasks, selectedPeriod);\n  var currentStats = selectedPeriod === 'week' ? weeklyStats : monthlyStats;\n  var renderStatsCard = function renderStatsCard(title, value, subtitle) {\n    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#007bff';\n    return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: [styles.statsCard, {\n        borderLeftColor: color\n      }],\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.statsTitle,\n        children: title\n      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: [styles.statsValue, {\n          color: color\n        }],\n        children: value\n      }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.statsSubtitle,\n        children: subtitle\n      })]\n    });\n  };\n  var renderInsightCard = function renderInsightCard(title, items, icon, color) {\n    return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.insightCard,\n      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: styles.insightHeader,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.insightIcon,\n          children: icon\n        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.insightTitle,\n          children: title\n        })]\n      }), items.length > 0 ? items.map(function (item, index) {\n        return (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n          style: [styles.insightText, {\n            color: color\n          }],\n          children: [\"\\u2022 \", item]\n        }, index);\n      }) : (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.noInsightText,\n        children: [\"No \", title.toLowerCase(), \" at the moment\"]\n      })]\n    });\n  };\n  var renderCategoryStats = function renderCategoryStats() {\n    return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.categoryContainer,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.sectionTitle,\n        children: \"Task Categories\"\n      }), Object.entries(categoryStats).map(function (_ref4) {\n        var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n          category = _ref5[0],\n          stats = _ref5[1];\n        return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: styles.categoryItem,\n          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n            style: styles.categoryHeader,\n            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: styles.categoryName,\n              children: category.charAt(0).toUpperCase() + category.slice(1)\n            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n              style: styles.categoryPercentage,\n              children: [stats.percentage, \"%\"]\n            })]\n          }), (0, _jsxRuntime.jsx)(_reactNative.View, {\n            style: styles.categoryBar,\n            children: (0, _jsxRuntime.jsx)(_reactNative.View, {\n              style: [styles.categoryProgress, {\n                width: `${stats.percentage}%`\n              }]\n            })\n          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n            style: styles.categoryDetails,\n            children: [stats.completed, \"/\", stats.total, \" completed\"]\n          })]\n        }, category);\n      })]\n    });\n  };\n  var getTrendIcon = function getTrendIcon(trend) {\n    switch (trend) {\n      case 'improving':\n        return 'üìà';\n      case 'declining':\n        return 'üìâ';\n      default:\n        return '‚û°Ô∏è';\n    }\n  };\n  var getTrendColor = function getTrendColor(trend) {\n    switch (trend) {\n      case 'improving':\n        return '#28a745';\n      case 'declining':\n        return '#dc3545';\n      default:\n        return '#6c757d';\n    }\n  };\n  if (loading) {\n    return (0, _jsxRuntime.jsx)(_reactNative.View, {\n      style: styles.loadingContainer,\n      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.loadingText,\n        children: \"Loading progress data...\"\n      })\n    });\n  }\n  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {\n    style: styles.container,\n    refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: handleRefresh\n    }),\n    showsVerticalScrollIndicator: false,\n    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.header,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.screenTitle,\n        children: \"Progress\"\n      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: styles.periodSelector,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n          style: [styles.periodButton, selectedPeriod === 'week' && styles.activePeriodButton],\n          onPress: function onPress() {\n            return setSelectedPeriod('week');\n          },\n          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: [styles.periodButtonText, selectedPeriod === 'week' && styles.activePeriodButtonText],\n            children: \"Week\"\n          })\n        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n          style: [styles.periodButton, selectedPeriod === 'month' && styles.activePeriodButton],\n          onPress: function onPress() {\n            return setSelectedPeriod('month');\n          },\n          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: [styles.periodButtonText, selectedPeriod === 'month' && styles.activePeriodButtonText],\n            children: \"Month\"\n          })\n        })]\n      })]\n    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.mainStatsContainer,\n      children: [renderStatsCard('Average Score', `${currentStats.averageScore}%`, `${getTrendIcon(currentStats.trend)} ${currentStats.trend}`, getTrendColor(currentStats.trend)), renderStatsCard('Tasks Completed', `${currentStats.completedTasks}/${currentStats.totalTasks}`, currentStats.totalTasks > 0 ? `${Math.round(currentStats.completedTasks / currentStats.totalTasks * 100)}% completion` : 'No tasks', '#28a745')]\n    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.mainStatsContainer,\n      children: [renderStatsCard('Events Attended', `${currentStats.completedEvents}/${currentStats.totalEvents}`, currentStats.totalEvents > 0 ? `${Math.round(currentStats.completedEvents / currentStats.totalEvents * 100)}% attendance` : 'No events', '#17a2b8'), renderStatsCard('Medication Adherence', `${Math.round(currentStats.averageMedicationAdherence * 100)}%`, 'Average compliance', '#ffc107')]\n    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.chartContainer,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.sectionTitle,\n        children: \"Productivity Trend\"\n      }), (0, _jsxRuntime.jsx)(_ProgressChart.default, {\n        data: chartData,\n        width: width - 32,\n        height: 220,\n        period: selectedPeriod\n      })]\n    }), selectedPeriod === 'month' && monthlyStats.streaks && (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.streaksContainer,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.sectionTitle,\n        children: \"Productivity Streaks\"\n      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: styles.streaksRow,\n        children: [renderStatsCard('Current Streak', `${monthlyStats.streaks.currentStreak}`, 'days', '#ff6b6b'), renderStatsCard('Longest Streak', `${monthlyStats.streaks.longestStreak}`, 'days', '#4ecdc4')]\n      })]\n    }), selectedPeriod === 'month' && monthlyStats.bestDay && monthlyStats.worstDay && (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.bestWorstContainer,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.sectionTitle,\n        children: \"Best & Worst Days\"\n      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: styles.bestWorstRow,\n        children: [renderStatsCard('Best Day', `${monthlyStats.bestDay.score}%`, new Date(monthlyStats.bestDay.date).toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        }), '#28a745'), renderStatsCard('Worst Day', `${monthlyStats.worstDay.score}%`, new Date(monthlyStats.worstDay.date).toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        }), '#dc3545')]\n      })]\n    }), Object.keys(categoryStats).length > 0 && renderCategoryStats(), renderInsightCard('Insights', insights.insights, 'üí°', '#007bff'), renderInsightCard('Recommendations', insights.recommendations, 'üéØ', '#28a745'), renderInsightCard('Achievements', insights.achievements, 'üèÜ', '#ffc107')]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa'\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa'\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#6c757d'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: '#ffffff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef'\n  },\n  screenTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#212529'\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 8,\n    padding: 2\n  },\n  periodButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6\n  },\n  activePeriodButton: {\n    backgroundColor: '#007bff'\n  },\n  periodButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#495057'\n  },\n  activePeriodButtonText: {\n    color: '#ffffff'\n  },\n  mainStatsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    paddingTop: 16,\n    gap: 8\n  },\n  statsCard: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 12,\n    borderLeftWidth: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2\n  },\n  statsTitle: {\n    fontSize: 12,\n    color: '#6c757d',\n    fontWeight: '600',\n    marginBottom: 4\n  },\n  statsValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 2\n  },\n  statsSubtitle: {\n    fontSize: 11,\n    color: '#6c757d'\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#212529',\n    marginBottom: 16\n  },\n  streaksContainer: {\n    paddingHorizontal: 16\n  },\n  streaksRow: {\n    flexDirection: 'row',\n    gap: 8\n  },\n  bestWorstContainer: {\n    paddingHorizontal: 16,\n    paddingTop: 16\n  },\n  bestWorstRow: {\n    flexDirection: 'row',\n    gap: 8\n  },\n  categoryContainer: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2\n  },\n  categoryItem: {\n    marginBottom: 16\n  },\n  categoryHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  categoryName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#212529'\n  },\n  categoryPercentage: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#007bff'\n  },\n  categoryBar: {\n    height: 6,\n    backgroundColor: '#e9ecef',\n    borderRadius: 3,\n    marginBottom: 4\n  },\n  categoryProgress: {\n    height: '100%',\n    backgroundColor: '#007bff',\n    borderRadius: 3\n  },\n  categoryDetails: {\n    fontSize: 12,\n    color: '#6c757d'\n  },\n  insightCard: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2\n  },\n  insightHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12\n  },\n  insightIcon: {\n    fontSize: 20,\n    marginRight: 8\n  },\n  insightTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#212529'\n  },\n  insightText: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: 4\n  },\n  noInsightText: {\n    fontSize: 14,\n    color: '#6c757d',\n    fontStyle: 'italic'\n  }\n});\nvar _default = exports.default = ProgressScreen;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_TimetableContext","_TasksContext","_MedicationContext","_ProgressChart","_interopRequireDefault","_progressUtils","_storage","_helpers","_jsxRuntime","_this","_jsxFileName","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_Dimensions$get","Dimensions","width","ProgressScreen","_useTimetable","useTimetable","timetableState","state","_useTasks","useTasks","tasksState","_useMedication","useMedication","medicationState","_useState","useState","_useState2","_slicedToArray2","productivityLogs","setProductivityLogs","_useState3","_useState4","selectedPeriod","setSelectedPeriod","_useState5","_useState6","refreshing","setRefreshing","_useState7","_useState8","loading","setLoading","useEffect","loadProgressData","generateTodaysLog","events","tasks","medications","_ref","_asyncToGenerator2","logs","loadProductivityLogs","error","console","apply","arguments","_ref2","today","Date","todayLog","generateProductivityLog","existingLog","getProductivityLogForDate","formatDateString","productivityScore","addProductivityLog","prev","filtered","filter","log","date","concat","_toConsumableArray2","sort","a","b","getTime","handleRefresh","_ref3","weeklyStats","calculateWeeklyStats","monthlyStats","calculateMonthlyStats","getMonth","getFullYear","insights","getProductivityInsights","chartData","generateChartData","categoryStats","calculateCategoryStats","currentStats","renderStatsCard","title","value","subtitle","color","length","undefined","jsxs","View","style","styles","statsCard","borderLeftColor","children","jsx","Text","statsTitle","statsValue","statsSubtitle","renderInsightCard","items","icon","insightCard","insightHeader","insightIcon","insightTitle","map","item","index","insightText","noInsightText","toLowerCase","renderCategoryStats","categoryContainer","sectionTitle","entries","_ref4","_ref5","category","stats","categoryItem","categoryHeader","categoryName","charAt","toUpperCase","slice","categoryPercentage","percentage","categoryBar","categoryProgress","categoryDetails","completed","total","getTrendIcon","trend","getTrendColor","loadingContainer","loadingText","ScrollView","container","refreshControl","RefreshControl","onRefresh","showsVerticalScrollIndicator","header","screenTitle","periodSelector","TouchableOpacity","periodButton","activePeriodButton","onPress","periodButtonText","activePeriodButtonText","mainStatsContainer","averageScore","completedTasks","totalTasks","Math","round","completedEvents","totalEvents","averageMedicationAdherence","chartContainer","data","height","period","streaks","streaksContainer","streaksRow","currentStreak","longestStreak","bestDay","worstDay","bestWorstContainer","bestWorstRow","score","toLocaleDateString","month","day","keys","recommendations","achievements","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","fontSize","flexDirection","paddingHorizontal","paddingVertical","borderBottomWidth","borderBottomColor","fontWeight","borderRadius","padding","paddingTop","gap","borderLeftWidth","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","marginBottom","margin","marginRight","lineHeight","fontStyle","_default","exports"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/screens/ProgressScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  RefreshControl,\n  Dimensions,\n} from 'react-native';\nimport { useTimetable } from '../context/TimetableContext';\nimport { useTasks } from '../context/TasksContext';\nimport { useMedication } from '../context/MedicationContext';\nimport ProgressChart from '../components/ProgressChart';\nimport { ProductivityLog } from '../types';\nimport {\n  generateProductivityLog,\n  calculateWeeklyStats,\n  calculateMonthlyStats,\n  getProductivityInsights,\n  generateChartData,\n  calculateCategoryStats,\n} from '../utils/progressUtils';\nimport {\n  loadProductivityLogs,\n  addProductivityLog,\n  getProductivityLogForDate,\n} from '../utils/storage';\nimport { formatDateString } from '../utils/helpers';\n\nconst { width } = Dimensions.get('window');\n\nconst ProgressScreen: React.FC = () => {\n  const { state: timetableState } = useTimetable();\n  const { state: tasksState } = useTasks();\n  const { state: medicationState } = useMedication();\n  \n  const [productivityLogs, setProductivityLogs] = useState<ProductivityLog[]>([]);\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month'>('week');\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadProgressData();\n  }, []);\n\n  // Generate today's productivity log when data changes\n  useEffect(() => {\n    generateTodaysLog();\n  }, [timetableState.events, tasksState.tasks, medicationState.medications]);\n\n  const loadProgressData = async () => {\n    try {\n      setLoading(true);\n      const logs = await loadProductivityLogs();\n      setProductivityLogs(logs);\n    } catch (error) {\n      console.error('Error loading progress data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateTodaysLog = async () => {\n    try {\n      const today = new Date();\n      const todayLog = generateProductivityLog(\n        tasksState.tasks,\n        timetableState.events,\n        medicationState.medications,\n        today\n      );\n\n      // Check if today's log already exists\n      const existingLog = await getProductivityLogForDate(formatDateString(today));\n      \n      if (!existingLog || existingLog.productivityScore !== todayLog.productivityScore) {\n        await addProductivityLog(todayLog);\n        \n        // Update local state\n        setProductivityLogs(prev => {\n          const filtered = prev.filter(log => log.date !== todayLog.date);\n          return [...filtered, todayLog].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n        });\n      }\n    } catch (error) {\n      console.error('Error generating today\\'s log:', error);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadProgressData();\n    await generateTodaysLog();\n    setRefreshing(false);\n  };\n\n  const weeklyStats = calculateWeeklyStats(productivityLogs);\n  const monthlyStats = calculateMonthlyStats(productivityLogs, new Date().getMonth(), new Date().getFullYear());\n  const insights = getProductivityInsights(\n    tasksState.tasks,\n    timetableState.events,\n    medicationState.medications,\n    productivityLogs\n  );\n  const chartData = generateChartData(productivityLogs, selectedPeriod);\n  const categoryStats = calculateCategoryStats(tasksState.tasks, selectedPeriod);\n\n  const currentStats = selectedPeriod === 'week' ? weeklyStats : monthlyStats;\n\n  const renderStatsCard = (title: string, value: string | number, subtitle?: string, color: string = '#007bff') => (\n    <View style={[styles.statsCard, { borderLeftColor: color }]}>\n      <Text style={styles.statsTitle}>{title}</Text>\n      <Text style={[styles.statsValue, { color }]}>{value}</Text>\n      {subtitle && <Text style={styles.statsSubtitle}>{subtitle}</Text>}\n    </View>\n  );\n\n  const renderInsightCard = (title: string, items: string[], icon: string, color: string) => (\n    <View style={styles.insightCard}>\n      <View style={styles.insightHeader}>\n        <Text style={styles.insightIcon}>{icon}</Text>\n        <Text style={styles.insightTitle}>{title}</Text>\n      </View>\n      {items.length > 0 ? (\n        items.map((item, index) => (\n          <Text key={index} style={[styles.insightText, { color }]}>\n            ‚Ä¢ {item}\n          </Text>\n        ))\n      ) : (\n        <Text style={styles.noInsightText}>No {title.toLowerCase()} at the moment</Text>\n      )}\n    </View>\n  );\n\n  const renderCategoryStats = () => (\n    <View style={styles.categoryContainer}>\n      <Text style={styles.sectionTitle}>Task Categories</Text>\n      {Object.entries(categoryStats).map(([category, stats]) => (\n        <View key={category} style={styles.categoryItem}>\n          <View style={styles.categoryHeader}>\n            <Text style={styles.categoryName}>\n              {category.charAt(0).toUpperCase() + category.slice(1)}\n            </Text>\n            <Text style={styles.categoryPercentage}>{stats.percentage}%</Text>\n          </View>\n          <View style={styles.categoryBar}>\n            <View \n              style={[\n                styles.categoryProgress, \n                { width: `${stats.percentage}%` }\n              ]} \n            />\n          </View>\n          <Text style={styles.categoryDetails}>\n            {stats.completed}/{stats.total} completed\n          </Text>\n        </View>\n      ))}\n    </View>\n  );\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'improving': return 'üìà';\n      case 'declining': return 'üìâ';\n      default: return '‚û°Ô∏è';\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'improving': return '#28a745';\n      case 'declining': return '#dc3545';\n      default: return '#6c757d';\n    }\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading progress data...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={\n        <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />\n      }\n      showsVerticalScrollIndicator={false}\n    >\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.screenTitle}>Progress</Text>\n        <View style={styles.periodSelector}>\n          <TouchableOpacity\n            style={[\n              styles.periodButton,\n              selectedPeriod === 'week' && styles.activePeriodButton,\n            ]}\n            onPress={() => setSelectedPeriod('week')}\n          >\n            <Text\n              style={[\n                styles.periodButtonText,\n                selectedPeriod === 'week' && styles.activePeriodButtonText,\n              ]}\n            >\n              Week\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[\n              styles.periodButton,\n              selectedPeriod === 'month' && styles.activePeriodButton,\n            ]}\n            onPress={() => setSelectedPeriod('month')}\n          >\n            <Text\n              style={[\n                styles.periodButtonText,\n                selectedPeriod === 'month' && styles.activePeriodButtonText,\n              ]}\n            >\n              Month\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Main Stats */}\n      <View style={styles.mainStatsContainer}>\n        {renderStatsCard(\n          'Average Score',\n          `${currentStats.averageScore}%`,\n          `${getTrendIcon(currentStats.trend)} ${currentStats.trend}`,\n          getTrendColor(currentStats.trend)\n        )}\n        {renderStatsCard(\n          'Tasks Completed',\n          `${currentStats.completedTasks}/${currentStats.totalTasks}`,\n          currentStats.totalTasks > 0 ? \n            `${Math.round((currentStats.completedTasks / currentStats.totalTasks) * 100)}% completion` : \n            'No tasks',\n          '#28a745'\n        )}\n      </View>\n\n      <View style={styles.mainStatsContainer}>\n        {renderStatsCard(\n          'Events Attended',\n          `${currentStats.completedEvents}/${currentStats.totalEvents}`,\n          currentStats.totalEvents > 0 ? \n            `${Math.round((currentStats.completedEvents / currentStats.totalEvents) * 100)}% attendance` : \n            'No events',\n          '#17a2b8'\n        )}\n        {renderStatsCard(\n          'Medication Adherence',\n          `${Math.round(currentStats.averageMedicationAdherence * 100)}%`,\n          'Average compliance',\n          '#ffc107'\n        )}\n      </View>\n\n      {/* Chart */}\n      <View style={styles.chartContainer}>\n        <Text style={styles.sectionTitle}>Productivity Trend</Text>\n        <ProgressChart\n          data={chartData}\n          width={width - 32}\n          height={220}\n          period={selectedPeriod}\n        />\n      </View>\n\n      {/* Streaks (for monthly view) */}\n      {selectedPeriod === 'month' && monthlyStats.streaks && (\n        <View style={styles.streaksContainer}>\n          <Text style={styles.sectionTitle}>Productivity Streaks</Text>\n          <View style={styles.streaksRow}>\n            {renderStatsCard(\n              'Current Streak',\n              `${monthlyStats.streaks.currentStreak}`,\n              'days',\n              '#ff6b6b'\n            )}\n            {renderStatsCard(\n              'Longest Streak',\n              `${monthlyStats.streaks.longestStreak}`,\n              'days',\n              '#4ecdc4'\n            )}\n          </View>\n        </View>\n      )}\n\n      {/* Best/Worst Days (for monthly view) */}\n      {selectedPeriod === 'month' && monthlyStats.bestDay && monthlyStats.worstDay && (\n        <View style={styles.bestWorstContainer}>\n          <Text style={styles.sectionTitle}>Best & Worst Days</Text>\n          <View style={styles.bestWorstRow}>\n            {renderStatsCard(\n              'Best Day',\n              `${monthlyStats.bestDay.score}%`,\n              new Date(monthlyStats.bestDay.date).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric' \n              }),\n              '#28a745'\n            )}\n            {renderStatsCard(\n              'Worst Day',\n              `${monthlyStats.worstDay.score}%`,\n              new Date(monthlyStats.worstDay.date).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric' \n              }),\n              '#dc3545'\n            )}\n          </View>\n        </View>\n      )}\n\n      {/* Category Stats */}\n      {Object.keys(categoryStats).length > 0 && renderCategoryStats()}\n\n      {/* Insights */}\n      {renderInsightCard('Insights', insights.insights, 'üí°', '#007bff')}\n\n      {/* Recommendations */}\n      {renderInsightCard('Recommendations', insights.recommendations, 'üéØ', '#28a745')}\n\n      {/* Achievements */}\n      {renderInsightCard('Achievements', insights.achievements, 'üèÜ', '#ffc107')}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#6c757d',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: '#ffffff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  screenTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#212529',\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 8,\n    padding: 2,\n  },\n  periodButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  activePeriodButton: {\n    backgroundColor: '#007bff',\n  },\n  periodButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#495057',\n  },\n  activePeriodButtonText: {\n    color: '#ffffff',\n  },\n  mainStatsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    paddingTop: 16,\n    gap: 8,\n  },\n  statsCard: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 12,\n    borderLeftWidth: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  statsTitle: {\n    fontSize: 12,\n    color: '#6c757d',\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  statsValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 2,\n  },\n  statsSubtitle: {\n    fontSize: 11,\n    color: '#6c757d',\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#212529',\n    marginBottom: 16,\n  },\n  streaksContainer: {\n    paddingHorizontal: 16,\n  },\n  streaksRow: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  bestWorstContainer: {\n    paddingHorizontal: 16,\n    paddingTop: 16,\n  },\n  bestWorstRow: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  categoryContainer: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  categoryItem: {\n    marginBottom: 16,\n  },\n  categoryHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  categoryName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#212529',\n  },\n  categoryPercentage: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#007bff',\n  },\n  categoryBar: {\n    height: 6,\n    backgroundColor: '#e9ecef',\n    borderRadius: 3,\n    marginBottom: 4,\n  },\n  categoryProgress: {\n    height: '100%',\n    backgroundColor: '#007bff',\n    borderRadius: 3,\n  },\n  categoryDetails: {\n    fontSize: 12,\n    color: '#6c757d',\n  },\n  insightCard: {\n    backgroundColor: '#ffffff',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  insightHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  insightIcon: {\n    fontSize: 20,\n    marginRight: 8,\n  },\n  insightTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#212529',\n  },\n  insightText: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: 4,\n  },\n  noInsightText: {\n    fontSize: 14,\n    color: '#6c757d',\n    fontStyle: 'italic',\n  },\n});\n\nexport default ProgressScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}