{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.dateNavigationService = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\nvar _dateFns = require(\"date-fns\");\nvar DateNavigationService = function () {\n  function DateNavigationService() {\n    (0, _classCallCheck2.default)(this, DateNavigationService);\n    this.currentDate = new Date();\n    this.listeners = [];\n    this.midnightTimer = null;\n  }\n  return (0, _createClass2.default)(DateNavigationService, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.setupMidnightTransition();\n      this.loadCurrentDate();\n    }\n  }, {\n    key: \"getCurrentDate\",\n    value: function getCurrentDate() {\n      return new Date(this.currentDate);\n    }\n  }, {\n    key: \"setCurrentDate\",\n    value: function setCurrentDate(date) {\n      var newDate = (0, _dateFns.startOfDay)(date);\n      if (!(0, _dateFns.isSameDay)(this.currentDate, newDate)) {\n        this.currentDate = newDate;\n        this.saveCurrentDate();\n        this.notifyListeners();\n      }\n    }\n  }, {\n    key: \"goToNextDay\",\n    value: function goToNextDay() {\n      var nextDay = (0, _dateFns.addDays)(this.currentDate, 1);\n      this.setCurrentDate(nextDay);\n    }\n  }, {\n    key: \"goToPreviousDay\",\n    value: function goToPreviousDay() {\n      var previousDay = (0, _dateFns.subDays)(this.currentDate, 1);\n      this.setCurrentDate(previousDay);\n    }\n  }, {\n    key: \"goToToday\",\n    value: function goToToday() {\n      this.setCurrentDate(new Date());\n    }\n  }, {\n    key: \"isToday\",\n    value: function isToday() {\n      return (0, _dateFns.isSameDay)(this.currentDate, new Date());\n    }\n  }, {\n    key: \"isPastDate\",\n    value: function isPastDate() {\n      return (0, _dateFns.isBefore)(this.currentDate, (0, _dateFns.startOfDay)(new Date()));\n    }\n  }, {\n    key: \"isFutureDate\",\n    value: function isFutureDate() {\n      return (0, _dateFns.isAfter)(this.currentDate, (0, _dateFns.startOfDay)(new Date()));\n    }\n  }, {\n    key: \"getFormattedDate\",\n    value: function getFormattedDate() {\n      var formatString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'yyyy-MM-dd';\n      return (0, _dateFns.format)(this.currentDate, formatString);\n    }\n  }, {\n    key: \"getWeekRange\",\n    value: function getWeekRange() {\n      var start = (0, _dateFns.startOfDay)(this.currentDate);\n      var end = (0, _dateFns.endOfDay)((0, _dateFns.addDays)(start, 6));\n      return {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: \"getMonthRange\",\n    value: function getMonthRange() {\n      var year = this.currentDate.getFullYear();\n      var month = this.currentDate.getMonth();\n      var start = new Date(year, month, 1);\n      var end = new Date(year, month + 1, 0);\n      return {\n        start: (0, _dateFns.startOfDay)(start),\n        end: (0, _dateFns.endOfDay)(end)\n      };\n    }\n  }, {\n    key: \"addDateChangeListener\",\n    value: function addDateChangeListener(listener) {\n      var _this = this;\n      this.listeners.push(listener);\n      return function () {\n        var index = _this.listeners.indexOf(listener);\n        if (index > -1) {\n          _this.listeners.splice(index, 1);\n        }\n      };\n    }\n  }, {\n    key: \"getDateRange\",\n    value: function getDateRange(startDate, endDate) {\n      var dates = [];\n      var currentDate = (0, _dateFns.startOfDay)(startDate);\n      var end = (0, _dateFns.startOfDay)(endDate);\n      while (currentDate <= end) {\n        dates.push(new Date(currentDate));\n        currentDate = (0, _dateFns.addDays)(currentDate, 1);\n      }\n      return dates;\n    }\n  }, {\n    key: \"isDateInRange\",\n    value: function isDateInRange(date, startDate, endDate) {\n      var checkDate = (0, _dateFns.startOfDay)(date);\n      var start = (0, _dateFns.startOfDay)(startDate);\n      var end = (0, _dateFns.startOfDay)(endDate);\n      return checkDate >= start && checkDate <= end;\n    }\n  }, {\n    key: \"getRelativeDateDescription\",\n    value: function getRelativeDateDescription() {\n      var today = new Date();\n      if ((0, _dateFns.isSameDay)(this.currentDate, today)) {\n        return 'Today';\n      } else if ((0, _dateFns.isSameDay)(this.currentDate, (0, _dateFns.addDays)(today, 1))) {\n        return 'Tomorrow';\n      } else if ((0, _dateFns.isSameDay)(this.currentDate, (0, _dateFns.subDays)(today, 1))) {\n        return 'Yesterday';\n      } else if (this.currentDate > today) {\n        var daysDiff = Math.ceil((this.currentDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n        return `In ${daysDiff} days`;\n      } else {\n        var _daysDiff = Math.ceil((today.getTime() - this.currentDate.getTime()) / (1000 * 60 * 60 * 24));\n        return `${_daysDiff} days ago`;\n      }\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (this.midnightTimer) {\n        clearTimeout(this.midnightTimer);\n        this.midnightTimer = null;\n      }\n      this.listeners = [];\n    }\n  }, {\n    key: \"setupMidnightTransition\",\n    value: function setupMidnightTransition() {\n      var _this2 = this;\n      var now = new Date();\n      var tomorrow = new Date(now);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n      var msUntilMidnight = tomorrow.getTime() - now.getTime();\n      this.midnightTimer = setTimeout(function () {\n        if (_this2.isToday()) {\n          _this2.setCurrentDate(new Date());\n        }\n        _this2.setupMidnightTransition();\n      }, msUntilMidnight);\n    }\n  }, {\n    key: \"notifyListeners\",\n    value: function notifyListeners() {\n      var _this3 = this;\n      this.listeners.forEach(function (listener) {\n        return listener(new Date(_this3.currentDate));\n      });\n    }\n  }, {\n    key: \"saveCurrentDate\",\n    value: function () {\n      var _saveCurrentDate = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield _asyncStorage.default.setItem('@current_date', this.currentDate.toISOString());\n        } catch (error) {\n          console.error('Failed to save current date:', error);\n        }\n      });\n      function saveCurrentDate() {\n        return _saveCurrentDate.apply(this, arguments);\n      }\n      return saveCurrentDate;\n    }()\n  }, {\n    key: \"loadCurrentDate\",\n    value: function () {\n      var _loadCurrentDate = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          var savedDate = yield _asyncStorage.default.getItem('@current_date');\n          if (savedDate) {\n            var parsedDate = new Date(savedDate);\n            var weekAgo = (0, _dateFns.subDays)(new Date(), 7);\n            if (parsedDate >= weekAgo) {\n              this.currentDate = (0, _dateFns.startOfDay)(parsedDate);\n            }\n          }\n        } catch (error) {\n          console.error('Failed to load current date:', error);\n        }\n      });\n      function loadCurrentDate() {\n        return _loadCurrentDate.apply(this, arguments);\n      }\n      return loadCurrentDate;\n    }()\n  }]);\n}();\nvar dateNavigationService = exports.dateNavigationService = new DateNavigationService();\nvar _default = exports.default = DateNavigationService;","map":{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_dateFns","DateNavigationService","_classCallCheck2","default","currentDate","Date","listeners","midnightTimer","_createClass2","key","value","initialize","setupMidnightTransition","loadCurrentDate","getCurrentDate","setCurrentDate","date","newDate","startOfDay","isSameDay","saveCurrentDate","notifyListeners","goToNextDay","nextDay","addDays","goToPreviousDay","previousDay","subDays","goToToday","isToday","isPastDate","isBefore","isFutureDate","isAfter","getFormattedDate","formatString","arguments","length","undefined","format","getWeekRange","start","end","endOfDay","getMonthRange","year","getFullYear","month","getMonth","addDateChangeListener","listener","_this","push","index","indexOf","splice","getDateRange","startDate","endDate","dates","isDateInRange","checkDate","getRelativeDateDescription","today","daysDiff","Math","ceil","getTime","cleanup","clearTimeout","_this2","now","tomorrow","setDate","getDate","setHours","msUntilMidnight","setTimeout","_this3","forEach","_saveCurrentDate","_asyncToGenerator2","AsyncStorage","setItem","toISOString","error","console","apply","_loadCurrentDate","savedDate","getItem","parsedDate","weekAgo","dateNavigationService","exports","_default"],"sources":["/Users/vaishnavkrishnan/Documents/projects/pd_app/src/services/DateNavigationService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { format, addDays, subDays, startOfDay, endOfDay, isSameDay, isAfter, isBefore } from 'date-fns';\n\n/**\n * Service for managing date navigation across the app\n */\nclass DateNavigationService {\n  private currentDate: Date = new Date();\n  private listeners: Array<(date: Date) => void> = [];\n  private midnightTimer: NodeJS.Timeout | null = null;\n\n  /**\n   * Initialize the date navigation service\n   */\n  initialize(): void {\n    this.setupMidnightTransition();\n    this.loadCurrentDate();\n  }\n\n  /**\n   * Get the current selected date\n   */\n  getCurrentDate(): Date {\n    return new Date(this.currentDate);\n  }\n\n  /**\n   * Set the current date and notify listeners\n   */\n  setCurrentDate(date: Date): void {\n    const newDate = startOfDay(date);\n    if (!isSameDay(this.currentDate, newDate)) {\n      this.currentDate = newDate;\n      this.saveCurrentDate();\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Navigate to the next day\n   */\n  goToNextDay(): void {\n    const nextDay = addDays(this.currentDate, 1);\n    this.setCurrentDate(nextDay);\n  }\n\n  /**\n   * Navigate to the previous day\n   */\n  goToPreviousDay(): void {\n    const previousDay = subDays(this.currentDate, 1);\n    this.setCurrentDate(previousDay);\n  }\n\n  /**\n   * Navigate to today\n   */\n  goToToday(): void {\n    this.setCurrentDate(new Date());\n  }\n\n  /**\n   * Check if the current date is today\n   */\n  isToday(): boolean {\n    return isSameDay(this.currentDate, new Date());\n  }\n\n  /**\n   * Check if the current date is in the past\n   */\n  isPastDate(): boolean {\n    return isBefore(this.currentDate, startOfDay(new Date()));\n  }\n\n  /**\n   * Check if the current date is in the future\n   */\n  isFutureDate(): boolean {\n    return isAfter(this.currentDate, startOfDay(new Date()));\n  }\n\n  /**\n   * Get formatted date string\n   */\n  getFormattedDate(formatString: string = 'yyyy-MM-dd'): string {\n    return format(this.currentDate, formatString);\n  }\n\n  /**\n   * Get date range for a week containing the current date\n   */\n  getWeekRange(): { start: Date; end: Date } {\n    const start = startOfDay(this.currentDate);\n    const end = endOfDay(addDays(start, 6));\n    return { start, end };\n  }\n\n  /**\n   * Get date range for a month containing the current date\n   */\n  getMonthRange(): { start: Date; end: Date } {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n    const start = new Date(year, month, 1);\n    const end = new Date(year, month + 1, 0);\n    return { start: startOfDay(start), end: endOfDay(end) };\n  }\n\n  /**\n   * Add listener for date changes\n   */\n  addDateChangeListener(listener: (date: Date) => void): () => void {\n    this.listeners.push(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Get dates in a range\n   */\n  getDateRange(startDate: Date, endDate: Date): Date[] {\n    const dates: Date[] = [];\n    let currentDate = startOfDay(startDate);\n    const end = startOfDay(endDate);\n\n    while (currentDate <= end) {\n      dates.push(new Date(currentDate));\n      currentDate = addDays(currentDate, 1);\n    }\n\n    return dates;\n  }\n\n  /**\n   * Check if a date is within a range\n   */\n  isDateInRange(date: Date, startDate: Date, endDate: Date): boolean {\n    const checkDate = startOfDay(date);\n    const start = startOfDay(startDate);\n    const end = startOfDay(endDate);\n    \n    return checkDate >= start && checkDate <= end;\n  }\n\n  /**\n   * Get relative date description (Today, Yesterday, Tomorrow, etc.)\n   */\n  getRelativeDateDescription(): string {\n    const today = new Date();\n    \n    if (isSameDay(this.currentDate, today)) {\n      return 'Today';\n    } else if (isSameDay(this.currentDate, addDays(today, 1))) {\n      return 'Tomorrow';\n    } else if (isSameDay(this.currentDate, subDays(today, 1))) {\n      return 'Yesterday';\n    } else if (this.currentDate > today) {\n      const daysDiff = Math.ceil((this.currentDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      return `In ${daysDiff} days`;\n    } else {\n      const daysDiff = Math.ceil((today.getTime() - this.currentDate.getTime()) / (1000 * 60 * 60 * 24));\n      return `${daysDiff} days ago`;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    if (this.midnightTimer) {\n      clearTimeout(this.midnightTimer);\n      this.midnightTimer = null;\n    }\n    this.listeners = [];\n  }\n\n  /**\n   * Private methods\n   */\n  private setupMidnightTransition(): void {\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    \n    const msUntilMidnight = tomorrow.getTime() - now.getTime();\n    \n    this.midnightTimer = setTimeout(() => {\n      // If we're currently viewing today, transition to the new day\n      if (this.isToday()) {\n        this.setCurrentDate(new Date());\n      }\n      \n      // Set up the next midnight transition\n      this.setupMidnightTransition();\n    }, msUntilMidnight);\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener(new Date(this.currentDate)));\n  }\n\n  private async saveCurrentDate(): Promise<void> {\n    try {\n      await AsyncStorage.setItem('@current_date', this.currentDate.toISOString());\n    } catch (error) {\n      console.error('Failed to save current date:', error);\n    }\n  }\n\n  private async loadCurrentDate(): Promise<void> {\n    try {\n      const savedDate = await AsyncStorage.getItem('@current_date');\n      if (savedDate) {\n        const parsedDate = new Date(savedDate);\n        // Only use saved date if it's not older than 7 days\n        const weekAgo = subDays(new Date(), 7);\n        if (parsedDate >= weekAgo) {\n          this.currentDate = startOfDay(parsedDate);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load current date:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const dateNavigationService = new DateNavigationService();\nexport default DateNavigationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}