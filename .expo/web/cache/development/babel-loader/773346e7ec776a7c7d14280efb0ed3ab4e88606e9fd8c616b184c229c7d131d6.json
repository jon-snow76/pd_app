{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _privateTypes = require(\"./privateTypes\");\nvar _types = require(\"./types\");\nvar isWindowPresent = typeof window !== 'undefined';\nvar connection = isWindowPresent ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined;\nvar typeMapping = {\n  bluetooth: _types.NetInfoStateType.bluetooth,\n  cellular: _types.NetInfoStateType.cellular,\n  ethernet: _types.NetInfoStateType.ethernet,\n  none: _types.NetInfoStateType.none,\n  other: _types.NetInfoStateType.other,\n  unknown: _types.NetInfoStateType.unknown,\n  wifi: _types.NetInfoStateType.wifi,\n  wimax: _types.NetInfoStateType.wimax,\n  mixed: _types.NetInfoStateType.other\n};\nvar effectiveTypeMapping = {\n  '2g': _types.NetInfoCellularGeneration['2g'],\n  '3g': _types.NetInfoCellularGeneration['3g'],\n  '4g': _types.NetInfoCellularGeneration['4g'],\n  'slow-2g': _types.NetInfoCellularGeneration['2g']\n};\nvar _getCurrentState = function getCurrentState(_requestedInterface) {\n  var isConnected = isWindowPresent ? navigator.onLine : false;\n  var baseState = {\n    isInternetReachable: null\n  };\n  if (!connection) {\n    if (isConnected) {\n      var _state = Object.assign({}, baseState, {\n        isConnected: true,\n        type: _types.NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false\n        }\n      });\n      return _state;\n    }\n    var _state2 = Object.assign({}, baseState, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: _types.NetInfoStateType.none,\n      details: null\n    });\n    return _state2;\n  }\n  var isConnectionExpensive = connection.saveData;\n  var type = connection.type ? typeMapping[connection.type] : isConnected ? _types.NetInfoStateType.other : _types.NetInfoStateType.unknown;\n  if (type === _types.NetInfoStateType.bluetooth) {\n    var _state3 = Object.assign({}, baseState, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n    return _state3;\n  } else if (type === _types.NetInfoStateType.cellular) {\n    var _state4 = Object.assign({}, baseState, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        cellularGeneration: effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null\n      }\n    });\n    return _state4;\n  } else if (type === _types.NetInfoStateType.ethernet) {\n    var _state5 = Object.assign({}, baseState, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ipAddress: null,\n        subnet: null\n      }\n    });\n    return _state5;\n  } else if (type === _types.NetInfoStateType.wifi) {\n    var _state6 = Object.assign({}, baseState, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null\n      }\n    });\n    return _state6;\n  } else if (type === _types.NetInfoStateType.wimax) {\n    var _state7 = Object.assign({}, baseState, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n    return _state7;\n  } else if (type === _types.NetInfoStateType.none) {\n    var _state8 = Object.assign({}, baseState, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: type,\n      details: null\n    });\n    return _state8;\n  } else if (type === _types.NetInfoStateType.unknown) {\n    var _state9 = Object.assign({}, baseState, {\n      isConnected: isConnected,\n      isInternetReachable: null,\n      type: type,\n      details: null\n    });\n    return _state9;\n  }\n  var state = Object.assign({}, baseState, {\n    isConnected: true,\n    type: _types.NetInfoStateType.other,\n    details: {\n      isConnectionExpensive: isConnectionExpensive\n    }\n  });\n  return state;\n};\nvar handlers = [];\nvar nativeHandlers = [];\nvar RNCNetInfo = {\n  addListener: function addListener(type, handler) {\n    switch (type) {\n      case _privateTypes.DEVICE_CONNECTIVITY_EVENT:\n        {\n          var nativeHandler = function nativeHandler() {\n            handler(_getCurrentState());\n          };\n          if (connection) {\n            connection.addEventListener('change', nativeHandler);\n          } else {\n            if (isWindowPresent) {\n              window.addEventListener('online', nativeHandler, false);\n              window.addEventListener('offline', nativeHandler, false);\n            }\n          }\n          handlers.push(handler);\n          nativeHandlers.push(nativeHandler);\n          break;\n        }\n    }\n  },\n  removeListeners: function removeListeners(type, handler) {\n    switch (type) {\n      case _privateTypes.DEVICE_CONNECTIVITY_EVENT:\n        {\n          var index = handlers.indexOf(handler);\n          var nativeHandler = nativeHandlers[index];\n          if (connection) {\n            connection.removeEventListener('change', nativeHandler);\n          } else {\n            if (isWindowPresent) {\n              window.removeEventListener('online', nativeHandler);\n              window.removeEventListener('offline', nativeHandler);\n            }\n          }\n          handlers.splice(index, 1);\n          nativeHandlers.splice(index, 1);\n          break;\n        }\n    }\n  },\n  getCurrentState: function () {\n    var _getCurrentState2 = (0, _asyncToGenerator2.default)(function* (requestedInterface) {\n      return _getCurrentState(requestedInterface);\n    });\n    function getCurrentState(_x) {\n      return _getCurrentState2.apply(this, arguments);\n    }\n    return getCurrentState;\n  }(),\n  configure: function configure() {\n    return;\n  }\n};\nvar _default = exports.default = RNCNetInfo;","map":{"version":3,"names":["_privateTypes","require","_types","isWindowPresent","window","connection","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","Object","assign","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","DEVICE_CONNECTIVITY_EVENT","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","_getCurrentState2","_asyncToGenerator2","default","requestedInterface","_x","apply","arguments","configure","_default","exports"],"sources":["/Users/vaishnavkrishnan/Desktop/pd_app/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = isWindowPresent\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}